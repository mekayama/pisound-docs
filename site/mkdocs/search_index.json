{
    "docs": [
        {
            "location": "/",
            "text": "Getting Started\n\n\n\n\n\n\npisound is an ultra-low latency high-quality soundcard and MIDI interface specially designed for Raspberry Pi pocket computers. Equipped with 192kHz 24-bit \nStereo Input and Output\n driven by the legendary Burr-Brown chips, DIN-5 \nMIDI Input and Output\n ports, \nuser-customizable button\n and bundled \nsoftware tools\n, it has everything you need to bring your audio projects to life in no time.\n\n\nHardware Setup\n\n\nMount pisound on top of your Raspberry Pi via the 40-pin header and fasten it with the screws provided while the RPi is unpowered, so it appears as in the image at the top. See compatible Raspberry Pi models \nhere\n.\n\n\nDriver Setup\n\n\nIf you don't have any Linux OS running on your Raspberry Pi, we suggest starting with \nRaspbian\n.\n\n\nPower your Raspberry Pi up\n and install the driver by running the below commands in a terminal window:\n\n\nwget http://blokas.io/pisound/install-pisound.sh -O install-pisound.sh\nchmod +x install-pisound.sh\n./install-pisound.sh\n\n\n\n\n\nA couple of simple [Y/n] questions will be presented about whether to install some of the additional software to get you started faster and whether to set pisound as the default card.\n\n\nAfter driver installation process is complete, reboot your Raspberry Pi (if the script asked for it at the end) and that's it. Now you can choose pisound as your main sound card through native Volume widget and use it with any Linux Audio/MIDI software. Done! Thank You!\n\n\nIf you hit any issues during driver setup, please see \nVerifying It Works\n and provide us \nfeedback\n.\n\n\nConnect Things\n\n\n\n\nRaspberry Pi in combination with pisound allows you to connect a huge variety of different types of audio-related gear. Thanks to pisound's Stereo Input with wide-range gain control design, you can connect audio sources ranging from your bass guitar to a CD player or your modular synth. Using Stereo Output you can hook pisound to any mixer, speakers or just plug in your headphones. Volume and Gain levels can be controlled using on-board knobs. For MIDI connectivity you also have a lot of options - MIDI In/Out through on-board DIN-5 sockets, USB-MIDI via RPi's USB ports or even \nWiFi-MIDI\n!\n\n\nPrint Your Own Case\n\n\nTo take the setup process one step further, you can even 3D-print your own case. All necessary files can be found \nhere\n.",
            "title": "Getting Started"
        },
        {
            "location": "/#getting-started",
            "text": "pisound is an ultra-low latency high-quality soundcard and MIDI interface specially designed for Raspberry Pi pocket computers. Equipped with 192kHz 24-bit  Stereo Input and Output  driven by the legendary Burr-Brown chips, DIN-5  MIDI Input and Output  ports,  user-customizable button  and bundled  software tools , it has everything you need to bring your audio projects to life in no time.",
            "title": "Getting Started"
        },
        {
            "location": "/#hardware-setup",
            "text": "Mount pisound on top of your Raspberry Pi via the 40-pin header and fasten it with the screws provided while the RPi is unpowered, so it appears as in the image at the top. See compatible Raspberry Pi models  here .",
            "title": "Hardware Setup"
        },
        {
            "location": "/#driver-setup",
            "text": "If you don't have any Linux OS running on your Raspberry Pi, we suggest starting with  Raspbian .  Power your Raspberry Pi up  and install the driver by running the below commands in a terminal window:  wget http://blokas.io/pisound/install-pisound.sh -O install-pisound.sh\nchmod +x install-pisound.sh\n./install-pisound.sh  A couple of simple [Y/n] questions will be presented about whether to install some of the additional software to get you started faster and whether to set pisound as the default card.  After driver installation process is complete, reboot your Raspberry Pi (if the script asked for it at the end) and that's it. Now you can choose pisound as your main sound card through native Volume widget and use it with any Linux Audio/MIDI software. Done! Thank You!  If you hit any issues during driver setup, please see  Verifying It Works  and provide us  feedback .",
            "title": "Driver Setup"
        },
        {
            "location": "/#connect-things",
            "text": "Raspberry Pi in combination with pisound allows you to connect a huge variety of different types of audio-related gear. Thanks to pisound's Stereo Input with wide-range gain control design, you can connect audio sources ranging from your bass guitar to a CD player or your modular synth. Using Stereo Output you can hook pisound to any mixer, speakers or just plug in your headphones. Volume and Gain levels can be controlled using on-board knobs. For MIDI connectivity you also have a lot of options - MIDI In/Out through on-board DIN-5 sockets, USB-MIDI via RPi's USB ports or even  WiFi-MIDI !",
            "title": "Connect Things"
        },
        {
            "location": "/#print-your-own-case",
            "text": "To take the setup process one step further, you can even 3D-print your own case. All necessary files can be found  here .",
            "title": "Print Your Own Case"
        },
        {
            "location": "/audio/",
            "text": "Audio\n\n\npisound is equipped with 192kHz 24-bit Stereo Input and Output. The legendary Burr-Brown Op-Amps, ADC and DAC chips are implemented in this little board to exhibit clean signal amplification and conversion between digital and analog realms. Though these chips themselves have a good power supply rejection ratio (PSRR), to ensure low-noise operation in the vicinity of an electrically noisy Raspberry Pi computer, any power line to the analog stuff is coupled via LDO\u2019s which filters any digital interference out. This design enables pisound to be graded as a high-fidelity audio device. For example a Hi-Fi device is expected to have the total harmonic distortion value (THD) less than 1% and the pisound has less than 0.05%. That means that you can daisy-chain 20 pisound boards and the chain would still be considered as a high-fidelity device!\n\n\nAudio Input\n\n\nThere is one unbalanced stereo input accessible via \u00bc\" (6.35mm) jack slot on pisound. One stereo channel can also be used as two unbalanced mono channels. Audio inputs are AC coupled to a gain stage built using \nOPA4134\n op-amps. Input resistance is 100kOhm for each channel. The gain can be adjusted simultaneously for both the left and the right channels from 0dB to +40dB with an on-board potentiometer. The maximum audio signal level before clipping is 5Vpp (at 0dB gain). The range of the gain adjustment can be divided into two sections. The first section occurs at rotation between 0% and 80% and it is used to precisely adjust for the high-level signals (line out, headphone amp out, etc...). The tight section at the maximum rotation of the gain pot acts as a +20dB switch for the low-level signals (guitar, microphone, etc.). When the signal clipping occurs in any channel, the red LED lights up and fades out after last clipped sample. Audio to digital conversion is carried out by \nPCM1804\n converter. An on-board clock oscillator delivers a clock signal to the ADC, which divides it according to the selected sample rate. ADC acts as the master of I2S line. pisound supports three sample rates: 48kHz, 96kHz and 192kHz. A filter at the input stage of PCM1804 ensures good anti-\naliasing\n.\n\n\n\nGain and input sensitivity versus position of \nGAIN\n pot\n\n\nAudio Output\n\n\nAudio output is DC coupled and can be accessed via the female \u00bc\" (6.35mm) stereo jack connector. Output volume level can be adjusted with on-board potentiometer. Maximum output level is 2.1Vrms when driving 1kOhm load. Digital to audio conversion is done in \nPCM5102A\n converter which has both Signal-to-Noise ratio and dynamic range of 112dB. The DAC acts as a slave on I2S line and the sampling rate is dictated by the ADC. An intelligent muting system is used to prevent pops and clicks when disconnecting power supply.\n\n\nAudio Latency and Other Parameters\n\n\nIn digital audio equipment it takes time for the signal at input to be processed and delivered at output. This time is called audio latency. There's three parts to it. The first is the time required for the ADC to do the conversion and to send digital data to the processing unit. The second step is to process data and prepare it for the transfer to the DAC. And the final part is getting the data to the DAC and converting it to the analog signal. The most time consuming is the second part. Parts one and three often require no more than 1 ms depending on architecture of ADC and DAC, sample rate and in-built digital filters.\n\n\n\n\nAn oscillogram showing audio latency of 2.092 ms. pisound and Raspberry Pi 2 working at sample rate of 192 kHz\n\n\n\nFigure 1  Response of the sine signal fed to loop-backed (digital\u2192DAC\u2192ADC\u2192digital) pisound showing the Signal-to-Noise Ratio (SNR) of 110 dB. Calculated Total Harmonic Distortion (THD) is less than 0.05%.\n\n\n\nFigure 2 Frequency response of the white noise fed to loop-backed (digital\u2192DAC\u2192ADC\u2192digital) pisound showing the bandwidth (BW) of the device and how it is estimated.",
            "title": "Audio"
        },
        {
            "location": "/audio/#audio",
            "text": "pisound is equipped with 192kHz 24-bit Stereo Input and Output. The legendary Burr-Brown Op-Amps, ADC and DAC chips are implemented in this little board to exhibit clean signal amplification and conversion between digital and analog realms. Though these chips themselves have a good power supply rejection ratio (PSRR), to ensure low-noise operation in the vicinity of an electrically noisy Raspberry Pi computer, any power line to the analog stuff is coupled via LDO\u2019s which filters any digital interference out. This design enables pisound to be graded as a high-fidelity audio device. For example a Hi-Fi device is expected to have the total harmonic distortion value (THD) less than 1% and the pisound has less than 0.05%. That means that you can daisy-chain 20 pisound boards and the chain would still be considered as a high-fidelity device!",
            "title": "Audio"
        },
        {
            "location": "/audio/#audio-input",
            "text": "There is one unbalanced stereo input accessible via \u00bc\" (6.35mm) jack slot on pisound. One stereo channel can also be used as two unbalanced mono channels. Audio inputs are AC coupled to a gain stage built using  OPA4134  op-amps. Input resistance is 100kOhm for each channel. The gain can be adjusted simultaneously for both the left and the right channels from 0dB to +40dB with an on-board potentiometer. The maximum audio signal level before clipping is 5Vpp (at 0dB gain). The range of the gain adjustment can be divided into two sections. The first section occurs at rotation between 0% and 80% and it is used to precisely adjust for the high-level signals (line out, headphone amp out, etc...). The tight section at the maximum rotation of the gain pot acts as a +20dB switch for the low-level signals (guitar, microphone, etc.). When the signal clipping occurs in any channel, the red LED lights up and fades out after last clipped sample. Audio to digital conversion is carried out by  PCM1804  converter. An on-board clock oscillator delivers a clock signal to the ADC, which divides it according to the selected sample rate. ADC acts as the master of I2S line. pisound supports three sample rates: 48kHz, 96kHz and 192kHz. A filter at the input stage of PCM1804 ensures good anti- aliasing .  \nGain and input sensitivity versus position of  GAIN  pot",
            "title": "Audio Input"
        },
        {
            "location": "/audio/#audio-output",
            "text": "Audio output is DC coupled and can be accessed via the female \u00bc\" (6.35mm) stereo jack connector. Output volume level can be adjusted with on-board potentiometer. Maximum output level is 2.1Vrms when driving 1kOhm load. Digital to audio conversion is done in  PCM5102A  converter which has both Signal-to-Noise ratio and dynamic range of 112dB. The DAC acts as a slave on I2S line and the sampling rate is dictated by the ADC. An intelligent muting system is used to prevent pops and clicks when disconnecting power supply.",
            "title": "Audio Output"
        },
        {
            "location": "/audio/#audio-latency-and-other-parameters",
            "text": "In digital audio equipment it takes time for the signal at input to be processed and delivered at output. This time is called audio latency. There's three parts to it. The first is the time required for the ADC to do the conversion and to send digital data to the processing unit. The second step is to process data and prepare it for the transfer to the DAC. And the final part is getting the data to the DAC and converting it to the analog signal. The most time consuming is the second part. Parts one and three often require no more than 1 ms depending on architecture of ADC and DAC, sample rate and in-built digital filters.   An oscillogram showing audio latency of 2.092 ms. pisound and Raspberry Pi 2 working at sample rate of 192 kHz  \nFigure 1  Response of the sine signal fed to loop-backed (digital\u2192DAC\u2192ADC\u2192digital) pisound showing the Signal-to-Noise Ratio (SNR) of 110 dB. Calculated Total Harmonic Distortion (THD) is less than 0.05%.  \nFigure 2 Frequency response of the white noise fed to loop-backed (digital\u2192DAC\u2192ADC\u2192digital) pisound showing the bandwidth (BW) of the device and how it is estimated.",
            "title": "Audio Latency and Other Parameters"
        },
        {
            "location": "/midi/",
            "text": "MIDI\n\n\nA standard MIDI interface is available via two female DIN-5 connectors. Unlike usual MIDI solutions for Raspberry Pi, MIDI on pisound is implemented using high speed SPI and a dedicated microcontroller for translating SPI data to serial MIDI byte streams and it's readily recognized by audio software as an ALSA MIDI device. The loopback latency of MIDI was measured to be 2.105ms. In addition, there are MIDI activity LEDs for both Input and Output indicating the flow of MIDI events.\n\n\nIn addition, pisound lets you take advantage of WiFi-MIDI. When WiFi Hotspot mode is enabled via \ntriple clicking The Button\n, touchosc2midi daemon gets launched. It translates OSC messages to MIDI events so you can control audio software running on Raspberry Pi from your smartphone or tablet.\n\n\nAnd of course you can use USB-MIDI devices as usual by connecting them to Raspberry Pi USB ports.\n\n\n\n\nAn oscillogram showing signal delay between MIDI input (yellow) and MIDI output (cyan) of 2.105 ms when echoing",
            "title": "MIDI"
        },
        {
            "location": "/midi/#midi",
            "text": "A standard MIDI interface is available via two female DIN-5 connectors. Unlike usual MIDI solutions for Raspberry Pi, MIDI on pisound is implemented using high speed SPI and a dedicated microcontroller for translating SPI data to serial MIDI byte streams and it's readily recognized by audio software as an ALSA MIDI device. The loopback latency of MIDI was measured to be 2.105ms. In addition, there are MIDI activity LEDs for both Input and Output indicating the flow of MIDI events.  In addition, pisound lets you take advantage of WiFi-MIDI. When WiFi Hotspot mode is enabled via  triple clicking The Button , touchosc2midi daemon gets launched. It translates OSC messages to MIDI events so you can control audio software running on Raspberry Pi from your smartphone or tablet.  And of course you can use USB-MIDI devices as usual by connecting them to Raspberry Pi USB ports.   An oscillogram showing signal delay between MIDI input (yellow) and MIDI output (cyan) of 2.105 ms when echoing",
            "title": "MIDI"
        },
        {
            "location": "/the-button/",
            "text": "The Button\n\n\nThe Button is a customizable button on the pisound board. There's 4 possible interactions with it:\n\n\n\n\nPress, hold and release after 1 or more seconds passed. Executes \n/usr/local/etc/pisound/hold.sh\n\n\nClick once. Executes \n/usr/local/etc/pisound/single_click.sh\n\n\nDouble click. Executes \n/usr/local/etc/pisound/double_click.sh\n\n\nTriple click. Executes \n/usr/local/etc/pisound/triple_click.sh\n\n\n\n\nEvery \ndown\n and \nup\n movement will also execute \n/usr/local/etc/pisound/down.sh\n and \n/usr/local/etc/pisound/up.sh\n respectively.\n\n\nYou may modify these scripts to do whatever you wish. Keep in mind that whenever you install / update the pisound-btn, if there were existing scripts in above locations, they are first backed up to \n/usr/local/etc/pisound/backups/<current date>\n, so if you had overridden the default scripts, you will have to restore your scripts manually.\n\n\nNote:\n The pisound-btn daemon process must be running in order for the button to work. The 'make install' automatically adds it to the Desktop autostart.\n\n\nSafely Shutdown The OS\n\n\nBy default, holding the button down for more than 1 second and releasing will cause the system to shutdown cleanly by executing \nsudo shutdown now\n. The MIDI activity LEDs will blink ten times quickly to confirm that the hold action was triggered. It is safe to unplug the power supply once RPi's activity LEDs stop flashing on and off. To restart, unplug and plug the power in again.\n\n\nStart a Pure Data Patch\n\n\nBy default, clicking the button once runs a script that scans the attached media storage devices for '\nmain.pd\n', or, if not found in external media, scans \n/usr/local/etc/pisound-patches/\n, kills all existing instances of Pure Data, then starts a new instance opening the file, enables audio and connects all the detected MIDI inputs and outputs to the Pure Data's virtual MIDI ports. ALSA engine of Pure Data is used.\n\n\nThe script will blink the MIDI Activity LEDs once just after it reacted to the click, and again 2 times after it succeeded launching the patch, or one long duration blink if an error occurred or no patch was found.\n\n\nTurn Off & Eject USB\n\n\nDouble clicking will stop all Pure Data instances and unmount all attached external media, so it can be safely removed.\n\n\nToggle WiFi Hotspot Mode\n\n\nTriple-clicking will reconfigure the WiFi of RPi3 board or an external SoftAP capable USB WiFi adapter to behave as an Access Point (a.k.a. Wireless Router), as well as start 'touchosc2midi' monitor which will be ready to listen and forward MyOsc data as MIDI to other software such as Pure Data.\n\n\nBy default, the AP will appear as '\npisound\n', and the default password is '\nblokaslabs\n' (without quotes). You can change the name and password by modifying \n/usr/local/etc/pisound/hostapd.conf\n Keep in mind that this file gets backed up and overwritten after reinstalling or updating the pisound-btn software.\n\n\nThe default IP address of RPi in WiFi Hotspot mode is 172.24.1.1 which you can use for ssh, VNC or wireless OSC / MIDI data! That means that you can easily interact with your system using just your laptop or phone, no more wires apart from power supply is needed! And it gets better, if the LAN cable is connected to RPi, it will share the Internet with the connected devices over WiFi!\n\n\nTo send MIDI OSC messages from your other devices to pisound, connect to the pisound's WiFi network, and set the 172.24.1.1 IP as the host in the software you're using (such as MyOSC or TouchOSC) settings. See [[here|faqs#how-to-send-wifi-midi-messages-to-your-raspberry-pi]] for more information.\n\n\nTo access RPi using ssh and/or VNC, make sure they're enabled in \nraspi-config\n. To enable, run in terminal:\n\nsudo raspi-config\n\n\n\nGo to \nInterfacing Options\n and make sure \nssh\n and \nVNC\n are enabled. If you don't see these options, go to \nAdvanced Options\n and do \nUpdate\n.\n\n\nTriple-clicking again will revert to regular WiFi behavior.",
            "title": "The Button"
        },
        {
            "location": "/the-button/#the-button",
            "text": "The Button is a customizable button on the pisound board. There's 4 possible interactions with it:   Press, hold and release after 1 or more seconds passed. Executes  /usr/local/etc/pisound/hold.sh  Click once. Executes  /usr/local/etc/pisound/single_click.sh  Double click. Executes  /usr/local/etc/pisound/double_click.sh  Triple click. Executes  /usr/local/etc/pisound/triple_click.sh   Every  down  and  up  movement will also execute  /usr/local/etc/pisound/down.sh  and  /usr/local/etc/pisound/up.sh  respectively.  You may modify these scripts to do whatever you wish. Keep in mind that whenever you install / update the pisound-btn, if there were existing scripts in above locations, they are first backed up to  /usr/local/etc/pisound/backups/<current date> , so if you had overridden the default scripts, you will have to restore your scripts manually.  Note:  The pisound-btn daemon process must be running in order for the button to work. The 'make install' automatically adds it to the Desktop autostart.",
            "title": "The Button"
        },
        {
            "location": "/the-button/#safely-shutdown-the-os",
            "text": "By default, holding the button down for more than 1 second and releasing will cause the system to shutdown cleanly by executing  sudo shutdown now . The MIDI activity LEDs will blink ten times quickly to confirm that the hold action was triggered. It is safe to unplug the power supply once RPi's activity LEDs stop flashing on and off. To restart, unplug and plug the power in again.",
            "title": "Safely Shutdown The OS"
        },
        {
            "location": "/the-button/#start-a-pure-data-patch",
            "text": "By default, clicking the button once runs a script that scans the attached media storage devices for ' main.pd ', or, if not found in external media, scans  /usr/local/etc/pisound-patches/ , kills all existing instances of Pure Data, then starts a new instance opening the file, enables audio and connects all the detected MIDI inputs and outputs to the Pure Data's virtual MIDI ports. ALSA engine of Pure Data is used.  The script will blink the MIDI Activity LEDs once just after it reacted to the click, and again 2 times after it succeeded launching the patch, or one long duration blink if an error occurred or no patch was found.",
            "title": "Start a Pure Data Patch"
        },
        {
            "location": "/the-button/#turn-off-eject-usb",
            "text": "Double clicking will stop all Pure Data instances and unmount all attached external media, so it can be safely removed.",
            "title": "Turn Off &amp; Eject USB"
        },
        {
            "location": "/the-button/#toggle-wifi-hotspot-mode",
            "text": "Triple-clicking will reconfigure the WiFi of RPi3 board or an external SoftAP capable USB WiFi adapter to behave as an Access Point (a.k.a. Wireless Router), as well as start 'touchosc2midi' monitor which will be ready to listen and forward MyOsc data as MIDI to other software such as Pure Data.  By default, the AP will appear as ' pisound ', and the default password is ' blokaslabs ' (without quotes). You can change the name and password by modifying  /usr/local/etc/pisound/hostapd.conf  Keep in mind that this file gets backed up and overwritten after reinstalling or updating the pisound-btn software.  The default IP address of RPi in WiFi Hotspot mode is 172.24.1.1 which you can use for ssh, VNC or wireless OSC / MIDI data! That means that you can easily interact with your system using just your laptop or phone, no more wires apart from power supply is needed! And it gets better, if the LAN cable is connected to RPi, it will share the Internet with the connected devices over WiFi!  To send MIDI OSC messages from your other devices to pisound, connect to the pisound's WiFi network, and set the 172.24.1.1 IP as the host in the software you're using (such as MyOSC or TouchOSC) settings. See [[here|faqs#how-to-send-wifi-midi-messages-to-your-raspberry-pi]] for more information.  To access RPi using ssh and/or VNC, make sure they're enabled in  raspi-config . To enable, run in terminal: sudo raspi-config \n\nGo to  Interfacing Options  and make sure  ssh  and  VNC  are enabled. If you don't see these options, go to  Advanced Options  and do  Update .  Triple-clicking again will revert to regular WiFi behavior.",
            "title": "Toggle WiFi Hotspot Mode"
        },
        {
            "location": "/software/",
            "text": "Software\n\n\npisound is compatible with virtually all Linux distributions and software as it comes with an ALSA audio and MIDI driver integrated in mainline Raspbian Linux kernel (ver. 4.4.27+). The support driver for pisound consists of two pieces - the Linux kernel module and user-space pisound-btn daemon.\n\n\nThe pisound button daemon is a user space program which implements monitoring of The Button on the board by registering a GPIO interrupt handler. Therefore it takes minimal CPU resources, but is still able to react to button pushes just at the moment it was interacted with. Read more on \nThe Button\n functionality below.\n\n\nYou can find the source code for The Button \nhere\n and kernel module \nhere\n.\n\n\nInstalling The Driver\n\n\nTo install the user-space button daemon and enable pisound, run the below commands in a terminal.\n\n\nwget http://blokas.io/pisound/install-pisound.sh -O install-pisound.sh\nchmod +x install-pisound.sh\n./install-pisound.sh\n\n\n\n\n\nThe above installs a button daemon named 'pisound-btn' and its scripts for button actions. If there were existing scripts, they are first backed up to \n/usr/local/etc/pisound/backups/<current date>\n, so if you had overridden the default functions, you will have to restore your scripts manually.\n\n\nVerifying It Works\n\n\nOnce the system boots up, run a terminal and run:\n\n amidi -l\n arecord -l\n aplay -l\n\n\n\nYou should see output similar to:\n\n pi@raspberrypi:~ $ amidi -l\n Dir Device    Name\n IO  hw:1,0    pisound MIDI PS-10JAD4Q\n pi@raspberrypi:~ $ arecord -l\n **** List of CAPTURE Hardware Devices ****\n card 1: pisound [pisound], device 0: PS-10JAD4Q snd-soc-dummy-dai-0 []\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n pi@raspberrypi:~ $ aplay -l\n **** List of PLAYBACK Hardware Devices ****\n card 0: ALSA [bcm2835 ALSA], device 0: bcm2835 ALSA [bcm2835 ALSA]\n   Subdevices: 8/8\n   Subdevice #0: subdevice #0\n   Subdevice #1: subdevice #1\n   Subdevice #2: subdevice #2\n   Subdevice #3: subdevice #3\n   Subdevice #4: subdevice #4\n   Subdevice #5: subdevice #5\n   Subdevice #6: subdevice #6\n   Subdevice #7: subdevice #7\n card 0: ALSA [bcm2835 ALSA], device 1: bcm2835 ALSA [bcm2835 IEC958/HDMI]\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n card 1: pisound [pisound], device 0: PS-10JAD4Q snd-soc-dummy-dai-0 []\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n\n\n\n\n\nIn case you're having difficulties with getting pisound's driver to run, contact us and the community here: \nhttp://community.blokas.io/\n, provide the exact error and the last command you've executed.\n\n\nCompatible Software\n\n\nPlease add or let us know if you have pisound working on a distribution that is not in the list yet!\n\n\n\n\nRaspbian\n\n\narch linux\n\n\nUbuntu Mate\n\n\n\n\nSoftware we tested which required no special changes, in alphabetic order:\n\n\n\n\nAudacity\n\n\nCarla / LV2\n\n\ndarkice and icecast\n\n\nJack\n\n\nSupercollider\n\n\nPure Data\n\n\n\n\nSoftware which required tweaks or workarounds, in alphabetic order:\n\n\n\n\nSonic Pi\n\n\nVolumio",
            "title": "Software"
        },
        {
            "location": "/software/#software",
            "text": "pisound is compatible with virtually all Linux distributions and software as it comes with an ALSA audio and MIDI driver integrated in mainline Raspbian Linux kernel (ver. 4.4.27+). The support driver for pisound consists of two pieces - the Linux kernel module and user-space pisound-btn daemon.  The pisound button daemon is a user space program which implements monitoring of The Button on the board by registering a GPIO interrupt handler. Therefore it takes minimal CPU resources, but is still able to react to button pushes just at the moment it was interacted with. Read more on  The Button  functionality below.  You can find the source code for The Button  here  and kernel module  here .",
            "title": "Software"
        },
        {
            "location": "/software/#installing-the-driver",
            "text": "To install the user-space button daemon and enable pisound, run the below commands in a terminal.  wget http://blokas.io/pisound/install-pisound.sh -O install-pisound.sh\nchmod +x install-pisound.sh\n./install-pisound.sh  The above installs a button daemon named 'pisound-btn' and its scripts for button actions. If there were existing scripts, they are first backed up to  /usr/local/etc/pisound/backups/<current date> , so if you had overridden the default functions, you will have to restore your scripts manually.",
            "title": "Installing The Driver"
        },
        {
            "location": "/software/#verifying-it-works",
            "text": "Once the system boots up, run a terminal and run:  amidi -l\n arecord -l\n aplay -l \n\nYou should see output similar to:  pi@raspberrypi:~ $ amidi -l\n Dir Device    Name\n IO  hw:1,0    pisound MIDI PS-10JAD4Q\n pi@raspberrypi:~ $ arecord -l\n **** List of CAPTURE Hardware Devices ****\n card 1: pisound [pisound], device 0: PS-10JAD4Q snd-soc-dummy-dai-0 []\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n pi@raspberrypi:~ $ aplay -l\n **** List of PLAYBACK Hardware Devices ****\n card 0: ALSA [bcm2835 ALSA], device 0: bcm2835 ALSA [bcm2835 ALSA]\n   Subdevices: 8/8\n   Subdevice #0: subdevice #0\n   Subdevice #1: subdevice #1\n   Subdevice #2: subdevice #2\n   Subdevice #3: subdevice #3\n   Subdevice #4: subdevice #4\n   Subdevice #5: subdevice #5\n   Subdevice #6: subdevice #6\n   Subdevice #7: subdevice #7\n card 0: ALSA [bcm2835 ALSA], device 1: bcm2835 ALSA [bcm2835 IEC958/HDMI]\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n card 1: pisound [pisound], device 0: PS-10JAD4Q snd-soc-dummy-dai-0 []\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0   In case you're having difficulties with getting pisound's driver to run, contact us and the community here:  http://community.blokas.io/ , provide the exact error and the last command you've executed.",
            "title": "Verifying It Works"
        },
        {
            "location": "/software/#compatible-software",
            "text": "Please add or let us know if you have pisound working on a distribution that is not in the list yet!   Raspbian  arch linux  Ubuntu Mate   Software we tested which required no special changes, in alphabetic order:   Audacity  Carla / LV2  darkice and icecast  Jack  Supercollider  Pure Data   Software which required tweaks or workarounds, in alphabetic order:   Sonic Pi  Volumio",
            "title": "Compatible Software"
        },
        {
            "location": "/pisound-&-Pure-Data/",
            "text": "pisound & Pure Data\n\n\nUsing pisound you can run your Pure Data patches straight from a USB thumb drive with a press of a button with no need to connect an external monitor, keyboard or mouse.\n\n\nPlug in a USB drive containing your Pure Data patch, main patch file called \nmain.pd\n, plug in any additional MIDI controller/keyboard, press The Button and Voil\u00e0!\n\n\nYou can read more about The Button functionality \nhere\n.\n\n\nIf you haven't already, you can install Pure Data by running the following command in a Terminal window:\n\n\nsudo apt-get install puredata\n\n\n\n\n\nConfiguring Pure Data\n\n\nBy default, Pure Data is launched when \nsingle-clicking\n the button as so:\n\n\nnohup puredata -alsa -audioadddev pisound -alsamidi -channels 2 -r 48000 -mididev 1 -send \";pd dsp 1\" \"$PURE_DATA_PATCH\" > /dev/null 2>&1 &\n\n\n\n\n\nYou may want to customize the command line arguments for Pure Data according to your own needs. To do that, check the \nPure Data's Command Line\n documentation and edit /usr/local/etc/pisound/single-click.sh.\n\n\nKeep in mind that updating pisound's software will backup and overwrite your scripts, so in that case, you may want to re-apply your changes. See \nhere\n for more details.",
            "title": "Pisound & Pure Data"
        },
        {
            "location": "/pisound-&-Pure-Data/#pisound-pure-data",
            "text": "Using pisound you can run your Pure Data patches straight from a USB thumb drive with a press of a button with no need to connect an external monitor, keyboard or mouse.  Plug in a USB drive containing your Pure Data patch, main patch file called  main.pd , plug in any additional MIDI controller/keyboard, press The Button and Voil\u00e0!  You can read more about The Button functionality  here .  If you haven't already, you can install Pure Data by running the following command in a Terminal window:  sudo apt-get install puredata",
            "title": "pisound &amp; Pure Data"
        },
        {
            "location": "/pisound-&-Pure-Data/#configuring-pure-data",
            "text": "By default, Pure Data is launched when  single-clicking  the button as so:  nohup puredata -alsa -audioadddev pisound -alsamidi -channels 2 -r 48000 -mididev 1 -send \";pd dsp 1\" \"$PURE_DATA_PATCH\" > /dev/null 2>&1 &  You may want to customize the command line arguments for Pure Data according to your own needs. To do that, check the  Pure Data's Command Line  documentation and edit /usr/local/etc/pisound/single-click.sh.  Keep in mind that updating pisound's software will backup and overwrite your scripts, so in that case, you may want to re-apply your changes. See  here  for more details.",
            "title": "Configuring Pure Data"
        },
        {
            "location": "/MODEP/",
            "text": "MODEP - MOD Emulator for Pisound\n\n\n\n\nIntroduction\n\n\nMOD or Musician Operated Device is \u201ca multi-effects pedal that pushes the limit of your guitar, bass, keyboard or any other instrument to craft the sounds you want and reproduce them instantly at home, studio or on stage.\u201d\n\n\nMOD is based on Linux SBC and LV2 plugins ecosystem. It has an intuitive drag-and-drop web-based interface so you can assemble your pedalboards as you do in real life. You can find more information about MOD workflow \nhere\n.\n\n\nAs it should be clear for you by now, MODEP is an emulator that will allow you to play around with MOD system using your Raspberry Pi and Pisound board.\n\n\nBy the way, MOD is not only software, it\u2019s also a nice piece of hardware and the MOD team has done a remarkable job for the whole Linux audio open-source community, so if you like this emulator you should get the real thing @ \nhttps://moddevices.com\n.\n\n\nSetup Instructions\n\n\n\n\nThe fastest way to start messing around with MOD system is to download already prepared MODEP image file based on Rasbian Lite OS \nhere\n (follow \nthese instructions\n to install the image on your SD card).\n\n\nFor manual setup visit \nthis page\n. \n\n\nRunning MODEP\n\n\n\n\nMount your freshly baked SD card to your Pi\n\n\nPower up your Raspberry Pi\n\n\nConnect to it via \u2018pisound' Wi-Fi hotspot using your computer or tablet (psw:blokaslabs)\n\n\nOpen your browser and go to this address \n172.24.1.1\n (you should see something like in the image below)\n\n\nThat\u2019s it. Now you can start building your pedalboards\n\n\n\n\n\n\nConfiguration\n\n\n\n\nssh pi@RASPBERRY_IP (psw:blokaslabs)\n\n\nrun \nmodep\n\n\n\n\nThe Button\n\n\nHere is the list of functions you can achieve using Pisound\u2019s button.\n\n\n\n\n\n\n\n\nInteraction\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nClick 1 to 8 times\n\n\nto load the pedalboard from the first bank on your list at index corresponding to the number of clicks (see the image below).\n\n\n\n\n\n\nHold for 1 second\n\n\nto turn Wi-Fi hotspot mode on/off.\n\n\n\n\n\n\nHold for 5 seconds\n\n\nto turn your Raspberry Pi off.\n\n\n\n\n\n\n\n\n\n\nPlugins\n\n\nAt the moment MODEP image comes with 144 LV2 plugins ranging from synths to heavy guitar distortion plugins.",
            "title": "MOD Emulator for Pisound"
        },
        {
            "location": "/MODEP/#modep-mod-emulator-for-pisound",
            "text": "",
            "title": "MODEP - MOD Emulator for Pisound"
        },
        {
            "location": "/MODEP/#introduction",
            "text": "MOD or Musician Operated Device is \u201ca multi-effects pedal that pushes the limit of your guitar, bass, keyboard or any other instrument to craft the sounds you want and reproduce them instantly at home, studio or on stage.\u201d  MOD is based on Linux SBC and LV2 plugins ecosystem. It has an intuitive drag-and-drop web-based interface so you can assemble your pedalboards as you do in real life. You can find more information about MOD workflow  here .  As it should be clear for you by now, MODEP is an emulator that will allow you to play around with MOD system using your Raspberry Pi and Pisound board.  By the way, MOD is not only software, it\u2019s also a nice piece of hardware and the MOD team has done a remarkable job for the whole Linux audio open-source community, so if you like this emulator you should get the real thing @  https://moddevices.com .",
            "title": "Introduction"
        },
        {
            "location": "/MODEP/#setup-instructions",
            "text": "The fastest way to start messing around with MOD system is to download already prepared MODEP image file based on Rasbian Lite OS  here  (follow  these instructions  to install the image on your SD card).  For manual setup visit  this page .",
            "title": "Setup Instructions"
        },
        {
            "location": "/MODEP/#running-modep",
            "text": "Mount your freshly baked SD card to your Pi  Power up your Raspberry Pi  Connect to it via \u2018pisound' Wi-Fi hotspot using your computer or tablet (psw:blokaslabs)  Open your browser and go to this address  172.24.1.1  (you should see something like in the image below)  That\u2019s it. Now you can start building your pedalboards",
            "title": "Running MODEP"
        },
        {
            "location": "/MODEP/#configuration",
            "text": "ssh pi@RASPBERRY_IP (psw:blokaslabs)  run  modep",
            "title": "Configuration"
        },
        {
            "location": "/MODEP/#the-button",
            "text": "Here is the list of functions you can achieve using Pisound\u2019s button.     Interaction  Action      Click 1 to 8 times  to load the pedalboard from the first bank on your list at index corresponding to the number of clicks (see the image below).    Hold for 1 second  to turn Wi-Fi hotspot mode on/off.    Hold for 5 seconds  to turn your Raspberry Pi off.",
            "title": "The Button"
        },
        {
            "location": "/MODEP/#plugins",
            "text": "At the moment MODEP image comes with 144 LV2 plugins ranging from synths to heavy guitar distortion plugins.",
            "title": "Plugins"
        },
        {
            "location": "/specs/",
            "text": "Specifications\n\n\nThe shield itself conforms to Raspberry Pi\u2019s Hardware Attached on Top (HAT) specifications and connects to Pi via the 40-pin header. The shield is slightly bigger in length (56x100 mm) than RPi itself. It has two female DIN-5 connectors for MIDI in/out and two \u00bc\" (6.35mm) stereo jack connectors for stereo audio in/out. There are two pots for gain and volume control, a programmable button and MIDI activity and input clip LEDs.\n\n\nAudio\n\n\n\n\n\n\n\n\nParameter\n\n\nConditions\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nInput/Output Coupling\n\n\n-\n\n\nAC and DC respectively\n\n\n\n\n\n\nInput/Output Channels\n\n\n-\n\n\n2 / 2 (Left and Right)\n\n\n\n\n\n\nInput/Output Type\n\n\n-\n\n\n\u00bc\" (6.35mm) Stereo\n\n\n\n\n\n\nInput/Output Resolution\n\n\n-\n\n\n24bit\n\n\n\n\n\n\nSampling Frequency (Fs)\n\n\n-\n\n\n48kHz, 96kHz, 192kHz\n\n\n\n\n\n\nInput/Output SNR@1kHz\n\n\nG = 0 dB\n\n\n110dB\n\n\n\n\n\n\nInput Impedance\n\n\n-\n\n\n100kOhm || 2pF\n\n\n\n\n\n\nInput Gain (G)\n\n\n-\n\n\n0dB to +40dB\n\n\n\n\n\n\nInput Clip LED\n\n\n-\n\n\nYes\n\n\n\n\n\n\nInput Clip Voltage\n\n\nG = 0 dB\n\n\n5V (peak to peak)\n\n\n\n\n\n\nFull Scale Output\n\n\nLoad impedance > 1 kOhm\n\n\n0V to 2.1V (RMS)\n\n\n\n\n\n\nLoopback Bandwidth (-3 dB)\n\n\nG = 0 dB, Fs = 48 kHz\n\n\n7.5Hz - 23kHz\n\n\n\n\n\n\nLoopback THD@1kHz\n\n\nG = 0 dB, Fs = 48 kHz\n\n\n< 0.045%\n\n\n\n\n\n\nLoopback Latency\n\n\nFs = 192 kHz, RPi2, buffer size = 128 frames\n\n\n2.092ms\n\n\n\n\n\n\nPhantom Power\n\n\n-\n\n\nNone\n\n\n\n\n\n\n\n\nMIDI\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nInput/Output connectors\n\n\nDIN-5 female sockets\n\n\n\n\n\n\nMIDI loopback latency\n\n\n2.105ms\n\n\n\n\n\n\nActivity LEDs\n\n\nInput & Output\n\n\n\n\n\n\n\n\nOther\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nCurrent Draw\n\n\n< 300mA @ 5.1VDC\n\n\n\n\n\n\nDimensions\n\n\n56mm x 100mm\n\n\n\n\n\n\nWeight\n\n\n67g\n\n\n\n\n\n\n\n\nPower Supply\n\n\nThere are two versions of pisound regarding power supply:\n\n\n\n\n\n\n9V version (beta):\n 7.2V - 12.6V, 18W minimum. 5.5x2.1 mm coaxial power jack connector. The inner connector is connected to the positive terminal, and the sleeve is connected to the ground. The power adapter connected to pisound supplies the RPi board too, so RPi does not need to have its USB supply port connected. The pisound itself has a power consumption of about 1.8W. A 9VDC power supply capable of delivering at least 2 Amps of current is recommended for this version.\n\n\n\n\n\n\n5.1V version (latest):\n pisound has no power connection and requires no additional power supply. It powers up from RPi power supply via pins on RPi header. pisound consumes no more than 300mA at 5.1VDC. When using this version of pisound, we recommend to use the official \n5.1VDC RPi power supply\n.\n\n\n\n\n\n\nSupported Raspberry Pi Models\n\n\n\n\n\n\n\n\nCompatible models\n\n\n\n\n\n\n\n\n\n\n\n\nRaspberry Pi 1 Model A+\n\n\n\n\n\n\n\n\nRaspberry Pi 1 Model B+\n\n\n\n\n\n\n\n\nRaspberry Pi 2\n\n\n\n\n\n\n\n\nRaspberry Pi 2 version 1.2\n\n\n\n\n\n\n\n\nRaspberry Pi 3\n\n\n\n\n\n\n\n\nRaspberry Pi Zero version 1.2\n\n\n\n\n\n\n\n\nRaspberry Pi Zero version 1.3\n\n\n\n\n\n\n\n\n\n\nPinout of Pi Header\n\n\n\n\n\n\nBlack - Power supply pins.\n\n\nRed - Pins used by pisound.\n\n\nGreen - Pins available for your use.\n\n\nBlue - Pins reserved for Raspberry Pi hats use.",
            "title": "Specs"
        },
        {
            "location": "/specs/#specifications",
            "text": "The shield itself conforms to Raspberry Pi\u2019s Hardware Attached on Top (HAT) specifications and connects to Pi via the 40-pin header. The shield is slightly bigger in length (56x100 mm) than RPi itself. It has two female DIN-5 connectors for MIDI in/out and two \u00bc\" (6.35mm) stereo jack connectors for stereo audio in/out. There are two pots for gain and volume control, a programmable button and MIDI activity and input clip LEDs.",
            "title": "Specifications"
        },
        {
            "location": "/specs/#audio",
            "text": "Parameter  Conditions  Value      Input/Output Coupling  -  AC and DC respectively    Input/Output Channels  -  2 / 2 (Left and Right)    Input/Output Type  -  \u00bc\" (6.35mm) Stereo    Input/Output Resolution  -  24bit    Sampling Frequency (Fs)  -  48kHz, 96kHz, 192kHz    Input/Output SNR@1kHz  G = 0 dB  110dB    Input Impedance  -  100kOhm || 2pF    Input Gain (G)  -  0dB to +40dB    Input Clip LED  -  Yes    Input Clip Voltage  G = 0 dB  5V (peak to peak)    Full Scale Output  Load impedance > 1 kOhm  0V to 2.1V (RMS)    Loopback Bandwidth (-3 dB)  G = 0 dB, Fs = 48 kHz  7.5Hz - 23kHz    Loopback THD@1kHz  G = 0 dB, Fs = 48 kHz  < 0.045%    Loopback Latency  Fs = 192 kHz, RPi2, buffer size = 128 frames  2.092ms    Phantom Power  -  None",
            "title": "Audio"
        },
        {
            "location": "/specs/#midi",
            "text": "Parameter  Value      Input/Output connectors  DIN-5 female sockets    MIDI loopback latency  2.105ms    Activity LEDs  Input & Output",
            "title": "MIDI"
        },
        {
            "location": "/specs/#other",
            "text": "Parameter  Value      Current Draw  < 300mA @ 5.1VDC    Dimensions  56mm x 100mm    Weight  67g",
            "title": "Other"
        },
        {
            "location": "/specs/#power-supply",
            "text": "There are two versions of pisound regarding power supply:    9V version (beta):  7.2V - 12.6V, 18W minimum. 5.5x2.1 mm coaxial power jack connector. The inner connector is connected to the positive terminal, and the sleeve is connected to the ground. The power adapter connected to pisound supplies the RPi board too, so RPi does not need to have its USB supply port connected. The pisound itself has a power consumption of about 1.8W. A 9VDC power supply capable of delivering at least 2 Amps of current is recommended for this version.    5.1V version (latest):  pisound has no power connection and requires no additional power supply. It powers up from RPi power supply via pins on RPi header. pisound consumes no more than 300mA at 5.1VDC. When using this version of pisound, we recommend to use the official  5.1VDC RPi power supply .",
            "title": "Power Supply"
        },
        {
            "location": "/specs/#supported-raspberry-pi-models",
            "text": "Compatible models       Raspberry Pi 1 Model A+     Raspberry Pi 1 Model B+     Raspberry Pi 2     Raspberry Pi 2 version 1.2     Raspberry Pi 3     Raspberry Pi Zero version 1.2     Raspberry Pi Zero version 1.3",
            "title": "Supported Raspberry Pi Models"
        },
        {
            "location": "/specs/#pinout-of-pi-header",
            "text": "Black - Power supply pins.  Red - Pins used by pisound.  Green - Pins available for your use.  Blue - Pins reserved for Raspberry Pi hats use.",
            "title": "Pinout of Pi Header"
        },
        {
            "location": "/Example-projects/",
            "text": "Projects Using pisound\n\n\npisound and LV2 Plugins\n\n\nOn \nhttp://rpi.autostatic.com/\n repository you can find some cool software packages for audio. One of those is \nCarla\n - a host for LV2 plugins.\n\n\n\n\nSo let's give it a go.\n\n\nFirst we have to add the repository to apt-get:\n\nwget -q -O - http://rpi.autostatic.com/autostatic.gpg.key | sudo apt-key add -\nsudo wget -q -O /etc/apt/sources.list.d/autostatic-audio-raspbian.list http://rpi.autostatic.com/autostatic-audio-raspbian.list\nsudo apt-get update\n\n\n\nAfter that's done, let's install \nCarla\n as well as \njackd\n server and \nqjackctl\n for configuring it:\n\nsudo apt-get install carla jackd qjackctl\n\n\n\nThen start \nqjackctl\n, you can do that by hitting Ctrl+F2 and typing in \nqjackctl\n and pressing enter.\n\n\nConfigure it in Setup... like so:\n\n\n\n\nAnd start the jack server by pressing Start:\n\n\n\n\nNow run Carla (Alt+F2, carla, enter)\n\n\nClick Configure Carla and make sure that Audio Driver is set to JACK. It will connect to the already started Jack server. For process mode I've used Single Client, but you can use any option you like.\n\n\nThen you can add plugins in Plugins section, and patch them up in Patch Bay section.\n\n\nThe top screenshot shows \nZSynAddSubFX\n connected to pisound's Input and Output, as well as MIDI data routed to the synth plugin.\n\n\nThere's a couple of plugins readily available to play around within Carla, and you should be able to find more LV2 plugins built for Raspberry Pi to experiment with on the Internet.\n\n\nInternet Radio Station\n\n\nUsing \nicecast\n and \ndarkice\n you can easily setup your own radio station and broadcast whatever is connected to the pisound input!\n\n\nFirst let's get the required software installed:\n\nsudo apt-get install icecast2 darkice\n\n\n\nThen we have to configure the darkice, feel free to customize to your liking.\n\n\nSave the below contents to \n/etc/darkice.cfg\n\n\n# this section describes general aspects of the live streaming session\n[general]\nduration      = 0                # duration of encoding, in seconds. 0 means forever\nbufferSecs    = 2                # size of internal slip buffer, in seconds\nreconnect     = yes              # reconnect to the server(s) if disconnected\n\n# this section describes the audio input that will be streamed\n[input]\ndevice        = hw:1,0           # Alsa soundcard device for the audio input\nsampleRate    = 48000            # sample rate in Hz. try 48000, 96000 or 192000\nbitsPerSample = 16               # bits per sample. try 16\nchannel       = 2                # channels. 1 = mono, 2 = stereo.\n                                 # Only stereo mode is supported by pisound.\n\n# this section describes a streaming connection to an IceCast2 server\n# there may be up to 8 of these sections, named [icecast2-0] ... [icecast2-7]\n# these can be mixed with [icecast-x] and [shoutcast-x] sections\n[icecast2-0]\nbitrateMode   = cbr              # variable bit rate\nbitrate       = 128\nformat        = mp3              # format of the stream: mp3\nquality       = 0.8              # quality of the stream sent to the server\nserver        = localhost        # host name of the server\nport          = 8000             # port of the IceCast2 server, usually 8000\npassword      = hackme           # source password to the IceCast2 server\nmountPoint    = pisound          # mount point of this stream on the IceCast2 server\nname          = pisound          # name of the stream\ndescription   = DarkIce on pisound # description of the stream\nurl           = http://localhost # URL related to the stream\ngenre         = my genre         # genre of the stream\npublic        = no               # advertise this stream?\n#localDumpFile = recording.mp3   # Record also to a file\n\n\n\n\n\nAnd finally, execute 'darkice' in a terminal or using Alt+F2:\n\n\ndarkice\n\n\nThen from other devices you can connect to \nhttp://raspberrypi_ip:8000/\n to see generic information about the station and \nhttp://raspberry_pi:8000/pisound\n to listen. (Replace raspberrypi_ip in the URLs using the IP of the Raspberry Pi)\n\n\nFor your station to be reachable outside of your local network, you need to have an externally accessible IP address provided by your ISP and you need to configure port forwarding on your router to forward requests on some port to port 8000 on Raspberry Pi. However, this is out of scope for this guide, there should be plenty of info around on how to set that up.\n\n\nNetwork Enabled Hi-Fi Player\n\n\nYou can use pisound with Volumio! Since version 2.129 (25-03-2017), pisound's module is integrated into Volumio, so installing the latest version or updating should be enough to get 'pisound' listed in Playback Options. Just enable I2S DAcs, pick pisound and save the configuration! We recommend switching the mixer to 'Software', if you want to control the volume within Volumio. You can use 'Hardware' mixer if using the physical volume control on pisound.\n\n\nNow you can enjoy using pisound as a network media player!\n\n\n\n\npisound with DIY MIDI Controller\n\n\nIf you want to add more controls to your pisound audio projects, you can make your own MIDI controller using a couple of potentiometers, push buttons and any Arduino compatible board that uses ATmega32U4 microcontroller. Alternatively, it should be straightforward to adapt the example code to use DIN-5 MIDI ports, as the usbmidi API interface is compatible with Serial API.\n\n\n\n\nGo \nhere\n for full instructions.",
            "title": "Example Projects"
        },
        {
            "location": "/Example-projects/#projects-using-pisound",
            "text": "",
            "title": "Projects Using pisound"
        },
        {
            "location": "/Example-projects/#pisound-and-lv2-plugins",
            "text": "On  http://rpi.autostatic.com/  repository you can find some cool software packages for audio. One of those is  Carla  - a host for LV2 plugins.   So let's give it a go.  First we have to add the repository to apt-get: wget -q -O - http://rpi.autostatic.com/autostatic.gpg.key | sudo apt-key add -\nsudo wget -q -O /etc/apt/sources.list.d/autostatic-audio-raspbian.list http://rpi.autostatic.com/autostatic-audio-raspbian.list\nsudo apt-get update \n\nAfter that's done, let's install  Carla  as well as  jackd  server and  qjackctl  for configuring it: sudo apt-get install carla jackd qjackctl \n\nThen start  qjackctl , you can do that by hitting Ctrl+F2 and typing in  qjackctl  and pressing enter.  Configure it in Setup... like so:   And start the jack server by pressing Start:   Now run Carla (Alt+F2, carla, enter)  Click Configure Carla and make sure that Audio Driver is set to JACK. It will connect to the already started Jack server. For process mode I've used Single Client, but you can use any option you like.  Then you can add plugins in Plugins section, and patch them up in Patch Bay section.  The top screenshot shows  ZSynAddSubFX  connected to pisound's Input and Output, as well as MIDI data routed to the synth plugin.  There's a couple of plugins readily available to play around within Carla, and you should be able to find more LV2 plugins built for Raspberry Pi to experiment with on the Internet.",
            "title": "pisound and LV2 Plugins"
        },
        {
            "location": "/Example-projects/#internet-radio-station",
            "text": "Using  icecast  and  darkice  you can easily setup your own radio station and broadcast whatever is connected to the pisound input!  First let's get the required software installed: sudo apt-get install icecast2 darkice \n\nThen we have to configure the darkice, feel free to customize to your liking.  Save the below contents to  /etc/darkice.cfg  # this section describes general aspects of the live streaming session\n[general]\nduration      = 0                # duration of encoding, in seconds. 0 means forever\nbufferSecs    = 2                # size of internal slip buffer, in seconds\nreconnect     = yes              # reconnect to the server(s) if disconnected\n\n# this section describes the audio input that will be streamed\n[input]\ndevice        = hw:1,0           # Alsa soundcard device for the audio input\nsampleRate    = 48000            # sample rate in Hz. try 48000, 96000 or 192000\nbitsPerSample = 16               # bits per sample. try 16\nchannel       = 2                # channels. 1 = mono, 2 = stereo.\n                                 # Only stereo mode is supported by pisound.\n\n# this section describes a streaming connection to an IceCast2 server\n# there may be up to 8 of these sections, named [icecast2-0] ... [icecast2-7]\n# these can be mixed with [icecast-x] and [shoutcast-x] sections\n[icecast2-0]\nbitrateMode   = cbr              # variable bit rate\nbitrate       = 128\nformat        = mp3              # format of the stream: mp3\nquality       = 0.8              # quality of the stream sent to the server\nserver        = localhost        # host name of the server\nport          = 8000             # port of the IceCast2 server, usually 8000\npassword      = hackme           # source password to the IceCast2 server\nmountPoint    = pisound          # mount point of this stream on the IceCast2 server\nname          = pisound          # name of the stream\ndescription   = DarkIce on pisound # description of the stream\nurl           = http://localhost # URL related to the stream\ngenre         = my genre         # genre of the stream\npublic        = no               # advertise this stream?\n#localDumpFile = recording.mp3   # Record also to a file   And finally, execute 'darkice' in a terminal or using Alt+F2:  darkice  Then from other devices you can connect to  http://raspberrypi_ip:8000/  to see generic information about the station and  http://raspberry_pi:8000/pisound  to listen. (Replace raspberrypi_ip in the URLs using the IP of the Raspberry Pi)  For your station to be reachable outside of your local network, you need to have an externally accessible IP address provided by your ISP and you need to configure port forwarding on your router to forward requests on some port to port 8000 on Raspberry Pi. However, this is out of scope for this guide, there should be plenty of info around on how to set that up.",
            "title": "Internet Radio Station"
        },
        {
            "location": "/Example-projects/#network-enabled-hi-fi-player",
            "text": "You can use pisound with Volumio! Since version 2.129 (25-03-2017), pisound's module is integrated into Volumio, so installing the latest version or updating should be enough to get 'pisound' listed in Playback Options. Just enable I2S DAcs, pick pisound and save the configuration! We recommend switching the mixer to 'Software', if you want to control the volume within Volumio. You can use 'Hardware' mixer if using the physical volume control on pisound.  Now you can enjoy using pisound as a network media player!",
            "title": "Network Enabled Hi-Fi Player"
        },
        {
            "location": "/Example-projects/#pisound-with-diy-midi-controller",
            "text": "If you want to add more controls to your pisound audio projects, you can make your own MIDI controller using a couple of potentiometers, push buttons and any Arduino compatible board that uses ATmega32U4 microcontroller. Alternatively, it should be straightforward to adapt the example code to use DIN-5 MIDI ports, as the usbmidi API interface is compatible with Serial API.   Go  here  for full instructions.",
            "title": "pisound with DIY MIDI Controller"
        },
        {
            "location": "/faqs/",
            "text": "How to start Jack Server for pisound?\n\n\nIn case you don't have qjackctl installed, run:\n\nsudo apt-get install qjackctl\n\n\n\nTo start the server, configured to use pisound, follow these steps:\n\n\n\n\nRun QJackCtl (either from the Applications->Sound & Video menu or executing 'qjackctl' in a terminal.\n\n\nClick Setup...\n\n\nMake sure that the following settings are set correctly:\n\n\nSample Rate is one of '48000', '96000' or '192000'. (The higher the sample rate, the more there is data to process for software. However, higher sample rate has slightly less latency, if software is fast enough to keep up!)\n\n\nInput Device and Output Device both are set to 'hw:pisound'.\n\n\nMIDI Driver is set to 'seq'\n\n\nClose the Setup window.\n\n\nClick Start.\n\n\nIf everything is fine, you should see 'Started' text written at the top left corner of the status area.\n\n\n\n\nNote:\n If something goes wrong, try different settings in Setup, and make sure that the sound card is not being exclusively used by some other software.\n\n\n\n\nHow to use Sonic Pi with pisound?\n\n\nSonic Pi has a special case for Raspberry Pi during startup. By default it kills the existing jackd server, and starts one configured to use the built in Raspberry Pi audio with hardcoded parameters. That makes Sonic Pi unusable with other audio cards, unless the below workaround is applied, so Sonic Pi would behave in the same way as if it's run on any other linux device.\n\n\nDo this once (might need to be done again in case any software updates touch it):\n\n\n\n\nEdit \n/opt/sonic-pi/app/server/sonicpi/scsynthexternal.rb\n as root user using your favorite editor (such as vim, nano, geany, or ...).\n\n\nLocate the following code snippet:\n\n     case os\n     when :raspberry\n       boot_server_raspberry_pi\n     when :linux\n       boot_server_linux\n     when :osx\n       boot_server_osx\n     when :windows\n       boot_server_windows\n     end\n     true\n\n\n\n\n\nChange it to:\n\n     case os\n     when :raspberry\n       #boot_server_raspberry_pi\n       boot_server_linux\n     when :linux\n       boot_server_linux\n     when :osx\n       boot_server_osx\n     when :windows\n       boot_server_windows\n     end\n     true\n\n\n\n\n\n\n\nDo this every time you want to start Sonic Pi:\n\n\n\n\nStart Jack server configured to use pisound.\n\n\nStart Sonic Pi, it will connect to the Jack server you had just launched.\n\n\n\n\nHow to send WiFi-MIDI messages to your Raspberry Pi?\n\n\nMaking use of your phone or a tablet for controlling software on Raspberry Pi using pisound is relatively easy, just follow these steps:\n\n\n\n\nTriple-click the button on pisound to enable the WiFi hotspot mode, touchosc2midi starts also.\n\n\nConnect to \"pisound\" WiFi access point using a phone or a tablet, using 'blokaslabs' as the password.\n\n\nOpen TouchOSC, MyOSC or similar app on your external device.\n\n\nHost IP address in the app's settings should be 172.24.1.1\n\n\nThat's it. From this point you can send messages from your phone/tablet to software running on your Raspberry Pi. The MIDI CC / Note number depends on the configuration of the app, for more information, see the TouchOSC documentation here: \nhttps://hexler.net/docs/touchosc-editor-controls-properties\n\n\n\n\nNote:\n If you want to to control Pd patch with Wifi-MIDI messages, after completing the steps above, insert a USB stick with your patch files into your Raspberry Pi and click the pisound button once to launch the patch!",
            "title": "FAQs"
        },
        {
            "location": "/faqs/#how-to-start-jack-server-for-pisound",
            "text": "In case you don't have qjackctl installed, run: sudo apt-get install qjackctl \n\nTo start the server, configured to use pisound, follow these steps:   Run QJackCtl (either from the Applications->Sound & Video menu or executing 'qjackctl' in a terminal.  Click Setup...  Make sure that the following settings are set correctly:  Sample Rate is one of '48000', '96000' or '192000'. (The higher the sample rate, the more there is data to process for software. However, higher sample rate has slightly less latency, if software is fast enough to keep up!)  Input Device and Output Device both are set to 'hw:pisound'.  MIDI Driver is set to 'seq'  Close the Setup window.  Click Start.  If everything is fine, you should see 'Started' text written at the top left corner of the status area.   Note:  If something goes wrong, try different settings in Setup, and make sure that the sound card is not being exclusively used by some other software.",
            "title": "How to start Jack Server for pisound?"
        },
        {
            "location": "/faqs/#how-to-use-sonic-pi-with-pisound",
            "text": "Sonic Pi has a special case for Raspberry Pi during startup. By default it kills the existing jackd server, and starts one configured to use the built in Raspberry Pi audio with hardcoded parameters. That makes Sonic Pi unusable with other audio cards, unless the below workaround is applied, so Sonic Pi would behave in the same way as if it's run on any other linux device.  Do this once (might need to be done again in case any software updates touch it):   Edit  /opt/sonic-pi/app/server/sonicpi/scsynthexternal.rb  as root user using your favorite editor (such as vim, nano, geany, or ...).  Locate the following code snippet:      case os\n     when :raspberry\n       boot_server_raspberry_pi\n     when :linux\n       boot_server_linux\n     when :osx\n       boot_server_osx\n     when :windows\n       boot_server_windows\n     end\n     true   Change it to:      case os\n     when :raspberry\n       #boot_server_raspberry_pi\n       boot_server_linux\n     when :linux\n       boot_server_linux\n     when :osx\n       boot_server_osx\n     when :windows\n       boot_server_windows\n     end\n     true    Do this every time you want to start Sonic Pi:   Start Jack server configured to use pisound.  Start Sonic Pi, it will connect to the Jack server you had just launched.",
            "title": "How to use Sonic Pi with pisound?"
        },
        {
            "location": "/faqs/#how-to-send-wifi-midi-messages-to-your-raspberry-pi",
            "text": "Making use of your phone or a tablet for controlling software on Raspberry Pi using pisound is relatively easy, just follow these steps:   Triple-click the button on pisound to enable the WiFi hotspot mode, touchosc2midi starts also.  Connect to \"pisound\" WiFi access point using a phone or a tablet, using 'blokaslabs' as the password.  Open TouchOSC, MyOSC or similar app on your external device.  Host IP address in the app's settings should be 172.24.1.1  That's it. From this point you can send messages from your phone/tablet to software running on your Raspberry Pi. The MIDI CC / Note number depends on the configuration of the app, for more information, see the TouchOSC documentation here:  https://hexler.net/docs/touchosc-editor-controls-properties   Note:  If you want to to control Pd patch with Wifi-MIDI messages, after completing the steps above, insert a USB stick with your patch files into your Raspberry Pi and click the pisound button once to launch the patch!",
            "title": "How to send WiFi-MIDI messages to your Raspberry Pi?"
        }
    ]
}