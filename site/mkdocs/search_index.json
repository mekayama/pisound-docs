{
    "docs": [
        {
            "location": "/", 
            "text": "Getting Started\n\n\n\n\n\n\nPisound is an ultra-low latency high-quality soundcard and MIDI interface specially designed for Raspberry Pi pocket computers. Equipped with 192kHz 24-bit \nStereo Input and Output\n driven by the legendary Burr-Brown chips, DIN-5 \nMIDI Input and Output\n ports, \nuser-customizable button\n and bundled \nsoftware tools\n, it has everything you need to bring your audio projects to life in no time.\n\n\nHardware Setup\n\n\nPisound\n\n\nYou should find 1 Pisound and a plastic bag containing 2 knobs, 8 screws and 4 spacers in the Pisound box.\n\n\nMount Pisound on top of your Raspberry Pi via the 40-pin header and fasten it with the screws provided while the RPi is unpowered, so it appears as in the image at the top. See compatible Raspberry Pi models \nhere\n.\n\n\nPisound Acrylic Case\n\n\nThe Pisound Acrylic Case consists of 2 cutout sheets of the enclosure sides and a plastic bag containing 4 short spacers, 4 longer ones and a button cap.\n\n\nDriver Setup\n\n\n\n\nIf you don't have any Linux OS running on your Raspberry Pi, we suggest starting with \nRaspbian\n.\n\n\nPower your Raspberry Pi up\n and install the Pisound software by running the below command in a terminal window:\n\n\ncurl https://blokas.io/pisound/install-pisound.sh | sh\n\n\n\nThis will set up the Blokas APT server and install all the software packages for Pisound. Then you may run \npisound-config\n to further customize your installation:\n\n\nsudo pisound-config\n\n\n\nDone! Thank You!\n\n\nIf you hit any issues during driver setup, please see \nVerifying It Works\n and provide us \nfeedback\n.\n\n\nConnect Things\n\n\n\n\nRaspberry Pi in combination with Pisound allows you to connect a huge variety of different types of audio-related gear. Thanks to Pisound's Stereo Input with wide-range gain control design, you can connect audio sources ranging from your bass guitar to a CD player or your modular synth. Using Stereo Output you can hook Pisound to any mixer, speakers or just plug in your headphones. Volume and Gain levels can be controlled using on-board knobs. For MIDI connectivity you also have a lot of options - MIDI In/Out through on-board DIN-5 sockets, USB-MIDI via RPi's USB ports or even \nWiFi-MIDI\n!\n\n\nPrint Your Own Case\n\n\nTo take the setup process one step further, you can even 3D-print your own case. All necessary files can be found \nhere\n.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Pisound is an ultra-low latency high-quality soundcard and MIDI interface specially designed for Raspberry Pi pocket computers. Equipped with 192kHz 24-bit  Stereo Input and Output  driven by the legendary Burr-Brown chips, DIN-5  MIDI Input and Output  ports,  user-customizable button  and bundled  software tools , it has everything you need to bring your audio projects to life in no time.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#hardware-setup", 
            "text": "", 
            "title": "Hardware Setup"
        }, 
        {
            "location": "/#pisound", 
            "text": "You should find 1 Pisound and a plastic bag containing 2 knobs, 8 screws and 4 spacers in the Pisound box.  Mount Pisound on top of your Raspberry Pi via the 40-pin header and fasten it with the screws provided while the RPi is unpowered, so it appears as in the image at the top. See compatible Raspberry Pi models  here .", 
            "title": "Pisound"
        }, 
        {
            "location": "/#pisound-acrylic-case", 
            "text": "The Pisound Acrylic Case consists of 2 cutout sheets of the enclosure sides and a plastic bag containing 4 short spacers, 4 longer ones and a button cap.", 
            "title": "Pisound Acrylic Case"
        }, 
        {
            "location": "/#driver-setup", 
            "text": "If you don't have any Linux OS running on your Raspberry Pi, we suggest starting with  Raspbian .  Power your Raspberry Pi up  and install the Pisound software by running the below command in a terminal window:  curl https://blokas.io/pisound/install-pisound.sh | sh  This will set up the Blokas APT server and install all the software packages for Pisound. Then you may run  pisound-config  to further customize your installation:  sudo pisound-config  Done! Thank You!  If you hit any issues during driver setup, please see  Verifying It Works  and provide us  feedback .", 
            "title": "Driver Setup"
        }, 
        {
            "location": "/#connect-things", 
            "text": "Raspberry Pi in combination with Pisound allows you to connect a huge variety of different types of audio-related gear. Thanks to Pisound's Stereo Input with wide-range gain control design, you can connect audio sources ranging from your bass guitar to a CD player or your modular synth. Using Stereo Output you can hook Pisound to any mixer, speakers or just plug in your headphones. Volume and Gain levels can be controlled using on-board knobs. For MIDI connectivity you also have a lot of options - MIDI In/Out through on-board DIN-5 sockets, USB-MIDI via RPi's USB ports or even  WiFi-MIDI !", 
            "title": "Connect Things"
        }, 
        {
            "location": "/#print-your-own-case", 
            "text": "To take the setup process one step further, you can even 3D-print your own case. All necessary files can be found  here .", 
            "title": "Print Your Own Case"
        }, 
        {
            "location": "/audio/", 
            "text": "Audio\n\n\nPisound is equipped with 192kHz 24-bit Stereo Input and Output. The legendary Burr-Brown Op-Amps, ADC and DAC chips are implemented in this little board to exhibit clean signal amplification and conversion between digital and analog realms. Though these chips themselves have a good power supply rejection ratio (PSRR), to ensure low-noise operation in the vicinity of an electrically noisy Raspberry Pi computer, any power line to the analog stuff is coupled via LDO\u2019s which filters any digital interference out. This design enables pisound to be graded as a high-fidelity audio device. For example a Hi-Fi device is expected to have the total harmonic distortion value (THD) less than 1% and the pisound has less than 0.05%. That means that you can daisy-chain 20 pisound boards and the chain would still be considered as a high-fidelity device!\n\n\nAudio Input\n\n\nThere is one unbalanced stereo input accessible via \n\" (6.35mm) jack slot on Pisound. The input stereo connector can also be used as two unbalanced mono channels. Audio inputs are AC coupled to a gain stage built using \nOPA4134\n op-amps. Input resistance is 100kOhm for each channel. The gain can be adjusted simultaneously for both the left and the right channels from 0dB to +40dB with an on-board potentiometer. The maximum audio signal level before clipping is 5Vpp (at 0dB gain). The range of the gain adjustment can be divided into two sections. The first section occurs at rotation between 0% and 80% and it is used to precisely adjust for the high-level signals (line out, headphone amp out, etc...). The tight section at the maximum rotation of the gain pot acts as a +20dB switch for the low-level signals (guitar, microphone, etc.). When the signal clipping occurs in any channel, the red LED lights up and fades out after last clipped sample. Audio to digital conversion is carried out by \nPCM1804\n converter. An on-board clock oscillator delivers a clock signal to the ADC, which divides it according to the selected sample rate. ADC acts as the master of I2S line. pisound supports three sample rates: 48kHz, 96kHz and 192kHz. A filter at the input stage of PCM1804 ensures good anti-\naliasing\n.\n\n\n\nGain and input sensitivity versus position of \nGAIN\n pot\n\n\n5V Bias Solder Jumpers\n\n\nThere are two solder jumpers near the input port, one for each input channel. By default, the jumpers are unsoldered. If the solder jumper is soldered\n, it enables the 5V bias voltage with a 2.2kOhm resistor for the input channel, and that allows connecting electret microphones.\n\n\n\n\n\n\n\n\nSolder Jumper State\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUnsoldered (default)\n\n\nNo bias voltage. For use with dynamic microphones, guitars, etc...\n\n\n\n\n\n\nSoldered\n\n\nBias voltage enabled. For use with electret microphones.\n\n\n\n\n\n\n\n\n Be careful when soldering. Any physical damage caused by improper soldering will void the warranty. Fortunately the solder jumpers are in an open area on the board.\n\n\nAudio Output\n\n\nAudio output is DC coupled and can be accessed via the female \n\" (6.35mm) stereo jack connector. Output volume level can be adjusted with on-board potentiometer. Maximum output level is 2.1Vrms when driving 1kOhm load. Digital to audio conversion is done in \nPCM5102A\n converter which has both Signal-to-Noise ratio and dynamic range of 112dB. The DAC acts as a slave on I2S line and the sampling rate is dictated by the ADC. An intelligent muting system is used to prevent pops and clicks when disconnecting power supply.\n\n\nAudio Latency and Other Parameters\n\n\nIn digital audio equipment it takes time for the signal at input to be processed and delivered at output. This time is called audio latency. There's three parts to it. The first is the time required for the ADC to do the conversion and to send digital data to the processing unit. The second step is to process data and prepare it for the transfer to the DAC. And the final part is getting the data to the DAC and converting it to the analog signal. The most time consuming is the second part. Parts one and three often require no more than 1 ms depending on architecture of ADC and DAC, sample rate and in-built digital filters.\n\n\n\n\nAn oscillogram showing audio latency of 2.092 ms. Pisound and Raspberry Pi 2 working at sample rate of 192 kHz\n\n\n\nFigure 1  Response of the sine signal fed to loop-backed (digital\u2192DAC\u2192ADC\u2192digital) Pisound showing the Signal-to-Noise Ratio (SNR) of 110 dB. Calculated Total Harmonic Distortion (THD) is less than 0.05%.\n\n\n\nFigure 2 Frequency response of the white noise fed to loop-backed (digital\u2192DAC\u2192ADC\u2192digital) Pisound showing the bandwidth (BW) of the device and how it is estimated.", 
            "title": "Audio"
        }, 
        {
            "location": "/audio/#audio", 
            "text": "Pisound is equipped with 192kHz 24-bit Stereo Input and Output. The legendary Burr-Brown Op-Amps, ADC and DAC chips are implemented in this little board to exhibit clean signal amplification and conversion between digital and analog realms. Though these chips themselves have a good power supply rejection ratio (PSRR), to ensure low-noise operation in the vicinity of an electrically noisy Raspberry Pi computer, any power line to the analog stuff is coupled via LDO\u2019s which filters any digital interference out. This design enables pisound to be graded as a high-fidelity audio device. For example a Hi-Fi device is expected to have the total harmonic distortion value (THD) less than 1% and the pisound has less than 0.05%. That means that you can daisy-chain 20 pisound boards and the chain would still be considered as a high-fidelity device!", 
            "title": "Audio"
        }, 
        {
            "location": "/audio/#audio-input", 
            "text": "There is one unbalanced stereo input accessible via  \" (6.35mm) jack slot on Pisound. The input stereo connector can also be used as two unbalanced mono channels. Audio inputs are AC coupled to a gain stage built using  OPA4134  op-amps. Input resistance is 100kOhm for each channel. The gain can be adjusted simultaneously for both the left and the right channels from 0dB to +40dB with an on-board potentiometer. The maximum audio signal level before clipping is 5Vpp (at 0dB gain). The range of the gain adjustment can be divided into two sections. The first section occurs at rotation between 0% and 80% and it is used to precisely adjust for the high-level signals (line out, headphone amp out, etc...). The tight section at the maximum rotation of the gain pot acts as a +20dB switch for the low-level signals (guitar, microphone, etc.). When the signal clipping occurs in any channel, the red LED lights up and fades out after last clipped sample. Audio to digital conversion is carried out by  PCM1804  converter. An on-board clock oscillator delivers a clock signal to the ADC, which divides it according to the selected sample rate. ADC acts as the master of I2S line. pisound supports three sample rates: 48kHz, 96kHz and 192kHz. A filter at the input stage of PCM1804 ensures good anti- aliasing .  \nGain and input sensitivity versus position of  GAIN  pot", 
            "title": "Audio Input"
        }, 
        {
            "location": "/audio/#5v-bias-solder-jumpers", 
            "text": "There are two solder jumpers near the input port, one for each input channel. By default, the jumpers are unsoldered. If the solder jumper is soldered , it enables the 5V bias voltage with a 2.2kOhm resistor for the input channel, and that allows connecting electret microphones.     Solder Jumper State  Description      Unsoldered (default)  No bias voltage. For use with dynamic microphones, guitars, etc...    Soldered  Bias voltage enabled. For use with electret microphones.      Be careful when soldering. Any physical damage caused by improper soldering will void the warranty. Fortunately the solder jumpers are in an open area on the board.", 
            "title": "5V Bias Solder Jumpers"
        }, 
        {
            "location": "/audio/#audio-output", 
            "text": "Audio output is DC coupled and can be accessed via the female  \" (6.35mm) stereo jack connector. Output volume level can be adjusted with on-board potentiometer. Maximum output level is 2.1Vrms when driving 1kOhm load. Digital to audio conversion is done in  PCM5102A  converter which has both Signal-to-Noise ratio and dynamic range of 112dB. The DAC acts as a slave on I2S line and the sampling rate is dictated by the ADC. An intelligent muting system is used to prevent pops and clicks when disconnecting power supply.", 
            "title": "Audio Output"
        }, 
        {
            "location": "/audio/#audio-latency-and-other-parameters", 
            "text": "In digital audio equipment it takes time for the signal at input to be processed and delivered at output. This time is called audio latency. There's three parts to it. The first is the time required for the ADC to do the conversion and to send digital data to the processing unit. The second step is to process data and prepare it for the transfer to the DAC. And the final part is getting the data to the DAC and converting it to the analog signal. The most time consuming is the second part. Parts one and three often require no more than 1 ms depending on architecture of ADC and DAC, sample rate and in-built digital filters.   An oscillogram showing audio latency of 2.092 ms. Pisound and Raspberry Pi 2 working at sample rate of 192 kHz  \nFigure 1  Response of the sine signal fed to loop-backed (digital\u2192DAC\u2192ADC\u2192digital) Pisound showing the Signal-to-Noise Ratio (SNR) of 110 dB. Calculated Total Harmonic Distortion (THD) is less than 0.05%.  \nFigure 2 Frequency response of the white noise fed to loop-backed (digital\u2192DAC\u2192ADC\u2192digital) Pisound showing the bandwidth (BW) of the device and how it is estimated.", 
            "title": "Audio Latency and Other Parameters"
        }, 
        {
            "location": "/midi/", 
            "text": "MIDI\n\n\nA standard MIDI interface is available via two female DIN-5 connectors. Unlike usual MIDI solutions for Raspberry Pi, MIDI on Pisound is implemented using high speed SPI and a dedicated microcontroller for translating SPI data to serial MIDI byte streams and it's readily recognized by audio software as an ALSA MIDI device. The loopback latency of MIDI was measured to be 2.105ms. In addition, there are MIDI activity LEDs for both Input and Output indicating the flow of MIDI events.\n\n\nIn addition, Pisound lets you take advantage of WiFi-MIDI. When WiFi Hotspot mode is enabled via \ntriple clicking The Button\n (unless the WiFi toggle was remapped), \ntouchosc2midi\n daemon gets launched. It translates OSC messages to MIDI events so you can control audio software running on Raspberry Pi from your smartphone or tablet.\n\n\nAnd of course you can use USB-MIDI devices as usual by connecting them to Raspberry Pi USB ports.\n\n\n\n\nAn oscillogram showing signal delay between MIDI input (yellow) and MIDI output (cyan) of 2.105 ms when echoing", 
            "title": "MIDI"
        }, 
        {
            "location": "/midi/#midi", 
            "text": "A standard MIDI interface is available via two female DIN-5 connectors. Unlike usual MIDI solutions for Raspberry Pi, MIDI on Pisound is implemented using high speed SPI and a dedicated microcontroller for translating SPI data to serial MIDI byte streams and it's readily recognized by audio software as an ALSA MIDI device. The loopback latency of MIDI was measured to be 2.105ms. In addition, there are MIDI activity LEDs for both Input and Output indicating the flow of MIDI events.  In addition, Pisound lets you take advantage of WiFi-MIDI. When WiFi Hotspot mode is enabled via  triple clicking The Button  (unless the WiFi toggle was remapped),  touchosc2midi  daemon gets launched. It translates OSC messages to MIDI events so you can control audio software running on Raspberry Pi from your smartphone or tablet.  And of course you can use USB-MIDI devices as usual by connecting them to Raspberry Pi USB ports.   An oscillogram showing signal delay between MIDI input (yellow) and MIDI output (cyan) of 2.105 ms when echoing", 
            "title": "MIDI"
        }, 
        {
            "location": "/software/", 
            "text": "Software\n\n\nPisound is compatible with virtually all Linux distributions and software as it comes with an ALSA audio and MIDI driver integrated into mainline Raspbian Linux kernel (ver. 4.4.27+). The support driver for Pisound consists of two pieces - the Linux kernel module and user-space pisound-btn daemon.\n\n\nThe Pisound button daemon is a user space program which implements monitoring of The Button on the board by registering a GPIO interrupt handler. Therefore it takes minimal CPU resources, but is still able to react to button pushes just at the moment it was interacted with. Read more on \nThe Button\n functionality below.\n\n\nYou can find the source code for The Button \nhere\n and kernel module \nhere\n.\n\n\nInstalling/Updating The Pisound Software\n\n\nTo install the Pisound software, run the below commands in a terminal.\n\n\ncurl https://blokas.io/pisound/install-pisound.sh | sh\n\n\n\nThis will set up the Blokas APT server and install all the software packages for Pisound. Then you may run \npisound-config\n to further customize your installation:\n\n\nsudo pisound-config\n\n\n\nVerifying It Works\n\n\nOnce the system boots up, run a terminal and run:\n\n amidi -l\n arecord -l\n aplay -l\n\nYou should see output similar to:\n\n pi@raspberrypi:~ $ amidi -l\n Dir Device    Name\n IO  hw:1,0    pisound MIDI PS-10JAD4Q\n pi@raspberrypi:~ $ arecord -l\n **** List of CAPTURE Hardware Devices ****\n card 1: pisound [pisound], device 0: PS-10JAD4Q snd-soc-dummy-dai-0 []\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n pi@raspberrypi:~ $ aplay -l\n **** List of PLAYBACK Hardware Devices ****\n card 0: ALSA [bcm2835 ALSA], device 0: bcm2835 ALSA [bcm2835 ALSA]\n   Subdevices: 8/8\n   Subdevice #0: subdevice #0\n   Subdevice #1: subdevice #1\n   Subdevice #2: subdevice #2\n   Subdevice #3: subdevice #3\n   Subdevice #4: subdevice #4\n   Subdevice #5: subdevice #5\n   Subdevice #6: subdevice #6\n   Subdevice #7: subdevice #7\n card 0: ALSA [bcm2835 ALSA], device 1: bcm2835 ALSA [bcm2835 IEC958/HDMI]\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n card 1: pisound [pisound], device 0: PS-10JAD4Q snd-soc-dummy-dai-0 []\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n\n\nFeedback\n\n\nIn case you're having difficulties with getting Pisound to run, contact us and the community \nhere\n, provide the exact error and the last command you've executed.\n\n\nCompatible Software\n\n\nPlease add or let us know if you have Pisound working on a distribution that is not on the list yet!\n\n\n\n\nRaspbian\n\n\narch linux\n\n\nUbuntu Mate\n\n\nVolumio\n\n\n\n\nThe software we tested which required no special changes, in alphabetic order:\n\n\n\n\nAudacity\n\n\nCarla / LV2\n\n\ndarkice and icecast\n\n\nJack\n\n\nPure Data\n\n\nSonic Pi\n\n\nSupercollider", 
            "title": "Software"
        }, 
        {
            "location": "/software/#software", 
            "text": "Pisound is compatible with virtually all Linux distributions and software as it comes with an ALSA audio and MIDI driver integrated into mainline Raspbian Linux kernel (ver. 4.4.27+). The support driver for Pisound consists of two pieces - the Linux kernel module and user-space pisound-btn daemon.  The Pisound button daemon is a user space program which implements monitoring of The Button on the board by registering a GPIO interrupt handler. Therefore it takes minimal CPU resources, but is still able to react to button pushes just at the moment it was interacted with. Read more on  The Button  functionality below.  You can find the source code for The Button  here  and kernel module  here .", 
            "title": "Software"
        }, 
        {
            "location": "/software/#installingupdating-the-pisound-software", 
            "text": "To install the Pisound software, run the below commands in a terminal.  curl https://blokas.io/pisound/install-pisound.sh | sh  This will set up the Blokas APT server and install all the software packages for Pisound. Then you may run  pisound-config  to further customize your installation:  sudo pisound-config", 
            "title": "Installing/Updating The Pisound Software"
        }, 
        {
            "location": "/software/#verifying-it-works", 
            "text": "Once the system boots up, run a terminal and run:  amidi -l\n arecord -l\n aplay -l \nYou should see output similar to:  pi@raspberrypi:~ $ amidi -l\n Dir Device    Name\n IO  hw:1,0    pisound MIDI PS-10JAD4Q\n pi@raspberrypi:~ $ arecord -l\n **** List of CAPTURE Hardware Devices ****\n card 1: pisound [pisound], device 0: PS-10JAD4Q snd-soc-dummy-dai-0 []\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n pi@raspberrypi:~ $ aplay -l\n **** List of PLAYBACK Hardware Devices ****\n card 0: ALSA [bcm2835 ALSA], device 0: bcm2835 ALSA [bcm2835 ALSA]\n   Subdevices: 8/8\n   Subdevice #0: subdevice #0\n   Subdevice #1: subdevice #1\n   Subdevice #2: subdevice #2\n   Subdevice #3: subdevice #3\n   Subdevice #4: subdevice #4\n   Subdevice #5: subdevice #5\n   Subdevice #6: subdevice #6\n   Subdevice #7: subdevice #7\n card 0: ALSA [bcm2835 ALSA], device 1: bcm2835 ALSA [bcm2835 IEC958/HDMI]\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0\n card 1: pisound [pisound], device 0: PS-10JAD4Q snd-soc-dummy-dai-0 []\n   Subdevices: 1/1\n   Subdevice #0: subdevice #0", 
            "title": "Verifying It Works"
        }, 
        {
            "location": "/software/#feedback", 
            "text": "In case you're having difficulties with getting Pisound to run, contact us and the community  here , provide the exact error and the last command you've executed.", 
            "title": "Feedback"
        }, 
        {
            "location": "/software/#compatible-software", 
            "text": "Please add or let us know if you have Pisound working on a distribution that is not on the list yet!   Raspbian  arch linux  Ubuntu Mate  Volumio   The software we tested which required no special changes, in alphabetic order:   Audacity  Carla / LV2  darkice and icecast  Jack  Pure Data  Sonic Pi  Supercollider", 
            "title": "Compatible Software"
        }, 
        {
            "location": "/the-button/", 
            "text": "The Button\n\n\nThe Button is a customizable button on the Pisound board. There's a lot of mappable actions for it. The mappings are expressed in \n/etc/pisound.conf\n. You may use \npisound-config\n to easily re-map the actions.\n\n\nThe \n/etc/pisound.conf\n file allows mapping these actions:\n\n\n\n\n\n\n\n\nAction Id\n\n\nDescription\n\n\nDefault script*\n\n\n\n\n\n\n\n\n\n\nDOWN\n\n\nButton gets pushed down.\n\n\ndown.sh\n\n\n\n\n\n\nUP\n\n\nButton gets released up.\n\n\nup.sh\n\n\n\n\n\n\nCLICK_1\n\n\nButton was clicked once.\n\n\nstart_puredata.sh\n\n\n\n\n\n\nCLICK_2\n\n\nButton was double-clicked.\n\n\nstop_puredata.sh\n\n\n\n\n\n\nCLICK_3\n\n\nButton was triple-clicked.\n\n\ntoggle_wifi_hotspot.sh\n\n\n\n\n\n\nCLICK_OTHER\n\n\nButton was clicked between 4 and 8 times.\n\n\ndo_nothing.sh\n\n\n\n\n\n\nHOLD_1S\n\n\nButton was held down between 0.4s and 3s.\n\n\ndo_nothing.sh\n\n\n\n\n\n\nHOLD_3S\n\n\nButton was held down between 3s and 5s.\n\n\ntoggle_bt_discoverable.sh\n\n\n\n\n\n\nHOLD_5S\n\n\nButton was held down between 5s and 7s.\n\n\nshutdown.sh\n\n\n\n\n\n\nHOLD_OTHER\n\n\nButton was held down for more than 7s.\n\n\ndo_nothing.sh\n\n\n\n\n\n\n\n\n* All default scripts are stored at \n/usr/local/pisound/scripts/pisound-btn\n\n\nThe hold action scripts get two arguments - first one for the count of clicks after which the button was held for a longer time and the second for the hold duration.\n\n\nThe click action scripts get one argument - the number of clicks.\n\n\nYou may modify these scripts to do whatever you wish or re-map any of the action to execute your own custom script.\n\n\nNote:\n The pisound-btn daemon process must be running in order for the button to work.\n\n\nMapping the Actions\n\n\nYou may re-map the default actions or point them to your own custom scripts to be executed by modifying the \n/etc/pisound.conf\n.\n\n\nUse \npisound-config\n for effortless remapping.\n\n\nThe config file format allows placing comments by prefixing the line with # character. Comments must begin at the first word of the line.\n\n\nNon-comment lines must consist of two space separated values. Spaces in the value are not permitted, therefore the absolute path to a custom script must not contain any spaces.\n\n\n# Example comment\nVARIABLE value_without_spaces\n\n\n\nAdding More Button Actions\n\n\nFor a new button action to appear in the \npisound-config\n button action list, a new .sh script should be added to \n/usr/local/pisound/scripts/pisound-btn/\n. Make sure the 'execute' (\nchmod +x ...\n) permission is set for the new script. The file name will appear in \npisound-config\n's Pisound Button Settings which can be used for mapping as an action for The Button interaction.\n\n\nThe sky is definitely not the limit on what The Button can do, the shell scripts can be used to bootstrap things written in any other language.\n\n\nA Quick Tutorial\n\n\n\n\n\n\nRun in a terminal the following commands:\n\n\ncd /usr/local/pisound/scripts/pisound-btn\nsudo touch hello_world.sh \n sudo chmod +x hello_world.sh\nsudo nano hello_world.sh\n\n\n\n\n\n\n\nInsert the following contents by copying and pasting (use \nctrl+shift+v\n or \nshift+insert\n to paste into the terminal):\n\n\n#!/bin/sh\n. /usr/local/pisound/scripts/common/common.sh\nlog \"Hello World!\"\nflash_leds 100\n\n\n\nExit \nnano\n by hitting \nctrl+x\n, press \ny\n and then \nenter\n to confirm write out.\n\n\n\n\n\n\nThen run \npisound-config\n:\n\n\nsudo pisound-config\n\n\n\nEnter \nChange Pisound Button Settings\n submenu, select \nCLICK_1\n, and pick the new \nHello World\n in the list.\n\n\nNow effective immediately, pressing The Button once will do a long-flash of the MIDI LEDs, as well as log a timestamped \nHello World!\n to The Buttons' log (\nsudo journalctl -f -u pisound-btn\n)\n\n\n\n\n\n\nWhat Did Just Happen?\n\n\nIn the first step, we have created a new script file with the execute permission set, and launched the \nnano\n editor.\n\n\nIn the second step, the script got coded. The \n#!/bin/sh\n indicates that this is a shell script. The \n. /usr/.../common.sh\n line imports the common functions defined in \ncommon.sh\n. The \nlog\n line prepends the timestamp to the given text to print and prints it to the system log. The \nflash_leds\n line interacts with the Pisound driver and causes the LEDs to flash. Try playing with the number argument to see the difference in flash duration. (Maximum value is 255)\n\n\nIn the third step we have remapped the single click action. This caused \n/etc/pisound.conf\n to get automatically updated accordingly.\n\n\nMain Action Scripts\n\n\nshutdown.sh\n - Safely Shutdown The OS\n\n\nBy default, holding the button down for more than 5 seconds and releasing will cause the system to shutdown cleanly by executing \nsudo shutdown now\n. The MIDI activity LEDs will blink ten times quickly to confirm that the hold action was triggered. It is safe to unplug the power supply once RPi's activity LEDs stop flashing on and off. To restart, unplug and plug the power in again.\n\n\nstart_puredata.sh\n - Start a Pure Data Patch\n\n\nBy default, clicking the button once runs a script that scans the attached media storage devices for '\nmain.pd\n', or, if not found in external media, scans \n/usr/local/puredata-patches/\n, kills all existing instances of Pure Data, then starts a new instance opening the file, enables audio and connects all the detected MIDI inputs and outputs to the Pure Data's virtual MIDI ports. ALSA engine of Pure Data is used.\n\n\nThe script will blink the MIDI Activity LEDs once just after it reacted to the click, and again 2 times after it succeeded launching the patch, or one long duration blink if an error occurred or no patch was found.\n\n\nstop_puredata.sh\n - Turn Off Pure Data \n Eject USB\n\n\nDouble clicking will stop all Pure Data instances and unmount all attached external media, so it can be safely removed.\n\n\ntoggle_wifi_hotspot.sh\n - Toggle WiFi Hotspot Mode\n\n\nTriple-clicking will reconfigure the WiFi of RPi3 board or an external SoftAP capable USB WiFi adapter to behave as an Access Point (a.k.a. Wireless Router), as well as start 'touchosc2midi' monitor which will be ready to listen and forward MyOsc data as MIDI to other software such as Pure Data.\n\n\nBy default, the AP will appear as '\nPisound\n', and the default password is '\nblokaslabs\n' (without quotes). You can change the name and password by using \npisound-config\n.\n\n\nThe default IP address of RPi in WiFi Hotspot mode is 172.24.1.1 which you can use for ssh, VNC or wireless OSC / MIDI data! That means that you can easily interact with your system using just your laptop or phone, no more wires apart from power supply is needed! And it gets better, if the LAN cable is connected to RPi, it will share the Internet with the connected devices over WiFi!\n\n\nTo send MIDI OSC messages from your other devices to Pisound, connect to the Pisound's WiFi network, and set the 172.24.1.1 IP as the host in the software you're using (such as MyOSC or TouchOSC) settings. See \nhere\n for more information.\n\n\nTo access RPi using ssh and/or VNC, make sure they're enabled in \nraspi-config\n. To enable, run in terminal:\n\nsudo raspi-config\n\nGo to \nInterfacing Options\n and make sure \nssh\n and \nVNC\n are enabled. If you don't see these options, go to \nAdvanced Options\n and do \nUpdate\n.\n\n\nTriple-clicking again will revert to regular WiFi behavior.\n\n\ntoggle_bt_discoverable.sh\n - Toggle Bluetooth Discoverability on and Off\n\n\nHolding The Button between 3 and 5 seconds will toggle the Bluetooth Discoverability. See \nPisound App\n for controlling Pisound \n RPi remotely.\n\n\nMiscellaneous Scripts\n\n\ndo_nothing.sh\n\n\nA script which literally does no nothing and is very good at it.\n\n\ndown.sh\n\n\nA script that gets triggered every time The Button is pushed down. By default it has code to start periodic LED flashing, in case The Button is going to remain held down.\n\n\nup.sh\n\n\nThe counter part of \ndown.sh\n - it gets triggered every time The Button is released and by default it is stopping the LED flashing initiated in the down event.\n\n\ncommon.sh\n\n\nDefines APIs shared between scripts for Pisound, such as flash_leds and periodic_led_blink which are used by other scripts for feedback.", 
            "title": "The Button"
        }, 
        {
            "location": "/the-button/#the-button", 
            "text": "The Button is a customizable button on the Pisound board. There's a lot of mappable actions for it. The mappings are expressed in  /etc/pisound.conf . You may use  pisound-config  to easily re-map the actions.  The  /etc/pisound.conf  file allows mapping these actions:     Action Id  Description  Default script*      DOWN  Button gets pushed down.  down.sh    UP  Button gets released up.  up.sh    CLICK_1  Button was clicked once.  start_puredata.sh    CLICK_2  Button was double-clicked.  stop_puredata.sh    CLICK_3  Button was triple-clicked.  toggle_wifi_hotspot.sh    CLICK_OTHER  Button was clicked between 4 and 8 times.  do_nothing.sh    HOLD_1S  Button was held down between 0.4s and 3s.  do_nothing.sh    HOLD_3S  Button was held down between 3s and 5s.  toggle_bt_discoverable.sh    HOLD_5S  Button was held down between 5s and 7s.  shutdown.sh    HOLD_OTHER  Button was held down for more than 7s.  do_nothing.sh     * All default scripts are stored at  /usr/local/pisound/scripts/pisound-btn  The hold action scripts get two arguments - first one for the count of clicks after which the button was held for a longer time and the second for the hold duration.  The click action scripts get one argument - the number of clicks.  You may modify these scripts to do whatever you wish or re-map any of the action to execute your own custom script.  Note:  The pisound-btn daemon process must be running in order for the button to work.", 
            "title": "The Button"
        }, 
        {
            "location": "/the-button/#mapping-the-actions", 
            "text": "You may re-map the default actions or point them to your own custom scripts to be executed by modifying the  /etc/pisound.conf .  Use  pisound-config  for effortless remapping.  The config file format allows placing comments by prefixing the line with # character. Comments must begin at the first word of the line.  Non-comment lines must consist of two space separated values. Spaces in the value are not permitted, therefore the absolute path to a custom script must not contain any spaces.  # Example comment\nVARIABLE value_without_spaces", 
            "title": "Mapping the Actions"
        }, 
        {
            "location": "/the-button/#adding-more-button-actions", 
            "text": "For a new button action to appear in the  pisound-config  button action list, a new .sh script should be added to  /usr/local/pisound/scripts/pisound-btn/ . Make sure the 'execute' ( chmod +x ... ) permission is set for the new script. The file name will appear in  pisound-config 's Pisound Button Settings which can be used for mapping as an action for The Button interaction.  The sky is definitely not the limit on what The Button can do, the shell scripts can be used to bootstrap things written in any other language.", 
            "title": "Adding More Button Actions"
        }, 
        {
            "location": "/the-button/#a-quick-tutorial", 
            "text": "Run in a terminal the following commands:  cd /usr/local/pisound/scripts/pisound-btn\nsudo touch hello_world.sh   sudo chmod +x hello_world.sh\nsudo nano hello_world.sh    Insert the following contents by copying and pasting (use  ctrl+shift+v  or  shift+insert  to paste into the terminal):  #!/bin/sh\n. /usr/local/pisound/scripts/common/common.sh\nlog \"Hello World!\"\nflash_leds 100  Exit  nano  by hitting  ctrl+x , press  y  and then  enter  to confirm write out.    Then run  pisound-config :  sudo pisound-config  Enter  Change Pisound Button Settings  submenu, select  CLICK_1 , and pick the new  Hello World  in the list.  Now effective immediately, pressing The Button once will do a long-flash of the MIDI LEDs, as well as log a timestamped  Hello World!  to The Buttons' log ( sudo journalctl -f -u pisound-btn )", 
            "title": "A Quick Tutorial"
        }, 
        {
            "location": "/the-button/#what-did-just-happen", 
            "text": "In the first step, we have created a new script file with the execute permission set, and launched the  nano  editor.  In the second step, the script got coded. The  #!/bin/sh  indicates that this is a shell script. The  . /usr/.../common.sh  line imports the common functions defined in  common.sh . The  log  line prepends the timestamp to the given text to print and prints it to the system log. The  flash_leds  line interacts with the Pisound driver and causes the LEDs to flash. Try playing with the number argument to see the difference in flash duration. (Maximum value is 255)  In the third step we have remapped the single click action. This caused  /etc/pisound.conf  to get automatically updated accordingly.", 
            "title": "What Did Just Happen?"
        }, 
        {
            "location": "/the-button/#main-action-scripts", 
            "text": "", 
            "title": "Main Action Scripts"
        }, 
        {
            "location": "/the-button/#shutdownsh-safely-shutdown-the-os", 
            "text": "By default, holding the button down for more than 5 seconds and releasing will cause the system to shutdown cleanly by executing  sudo shutdown now . The MIDI activity LEDs will blink ten times quickly to confirm that the hold action was triggered. It is safe to unplug the power supply once RPi's activity LEDs stop flashing on and off. To restart, unplug and plug the power in again.", 
            "title": "shutdown.sh - Safely Shutdown The OS"
        }, 
        {
            "location": "/the-button/#start_puredatash-start-a-pure-data-patch", 
            "text": "By default, clicking the button once runs a script that scans the attached media storage devices for ' main.pd ', or, if not found in external media, scans  /usr/local/puredata-patches/ , kills all existing instances of Pure Data, then starts a new instance opening the file, enables audio and connects all the detected MIDI inputs and outputs to the Pure Data's virtual MIDI ports. ALSA engine of Pure Data is used.  The script will blink the MIDI Activity LEDs once just after it reacted to the click, and again 2 times after it succeeded launching the patch, or one long duration blink if an error occurred or no patch was found.", 
            "title": "start_puredata.sh - Start a Pure Data Patch"
        }, 
        {
            "location": "/the-button/#stop_puredatash-turn-off-pure-data-eject-usb", 
            "text": "Double clicking will stop all Pure Data instances and unmount all attached external media, so it can be safely removed.", 
            "title": "stop_puredata.sh - Turn Off Pure Data &amp; Eject USB"
        }, 
        {
            "location": "/the-button/#toggle_wifi_hotspotsh-toggle-wifi-hotspot-mode", 
            "text": "Triple-clicking will reconfigure the WiFi of RPi3 board or an external SoftAP capable USB WiFi adapter to behave as an Access Point (a.k.a. Wireless Router), as well as start 'touchosc2midi' monitor which will be ready to listen and forward MyOsc data as MIDI to other software such as Pure Data.  By default, the AP will appear as ' Pisound ', and the default password is ' blokaslabs ' (without quotes). You can change the name and password by using  pisound-config .  The default IP address of RPi in WiFi Hotspot mode is 172.24.1.1 which you can use for ssh, VNC or wireless OSC / MIDI data! That means that you can easily interact with your system using just your laptop or phone, no more wires apart from power supply is needed! And it gets better, if the LAN cable is connected to RPi, it will share the Internet with the connected devices over WiFi!  To send MIDI OSC messages from your other devices to Pisound, connect to the Pisound's WiFi network, and set the 172.24.1.1 IP as the host in the software you're using (such as MyOSC or TouchOSC) settings. See  here  for more information.  To access RPi using ssh and/or VNC, make sure they're enabled in  raspi-config . To enable, run in terminal: sudo raspi-config \nGo to  Interfacing Options  and make sure  ssh  and  VNC  are enabled. If you don't see these options, go to  Advanced Options  and do  Update .  Triple-clicking again will revert to regular WiFi behavior.", 
            "title": "toggle_wifi_hotspot.sh - Toggle WiFi Hotspot Mode"
        }, 
        {
            "location": "/the-button/#toggle_bt_discoverablesh-toggle-bluetooth-discoverability-on-and-off", 
            "text": "Holding The Button between 3 and 5 seconds will toggle the Bluetooth Discoverability. See  Pisound App  for controlling Pisound   RPi remotely.", 
            "title": "toggle_bt_discoverable.sh - Toggle Bluetooth Discoverability on and Off"
        }, 
        {
            "location": "/the-button/#miscellaneous-scripts", 
            "text": "", 
            "title": "Miscellaneous Scripts"
        }, 
        {
            "location": "/the-button/#do_nothingsh", 
            "text": "A script which literally does no nothing and is very good at it.", 
            "title": "do_nothing.sh"
        }, 
        {
            "location": "/the-button/#downsh", 
            "text": "A script that gets triggered every time The Button is pushed down. By default it has code to start periodic LED flashing, in case The Button is going to remain held down.", 
            "title": "down.sh"
        }, 
        {
            "location": "/the-button/#upsh", 
            "text": "The counter part of  down.sh  - it gets triggered every time The Button is released and by default it is stopping the LED flashing initiated in the down event.", 
            "title": "up.sh"
        }, 
        {
            "location": "/the-button/#commonsh", 
            "text": "Defines APIs shared between scripts for Pisound, such as flash_leds and periodic_led_blink which are used by other scripts for feedback.", 
            "title": "common.sh"
        }, 
        {
            "location": "/pisound-config/", 
            "text": "Pisound Config\n\n\n\n\npisound-config\n allows reconfiguring the most important aspects of the system for use with Pisound, as well as setting up additional software and displaying some useful information. It is available since version 1.05 of \npisound-btn\n.\n\n\nTo get started, simply open a terminal and run:\n\n\nsudo pisound-config\n\n\n\nIf you get a command not found error, see \nInstalling/Updating The Pisound Software\n for instructions on how to get the latest version.\n\n\nAdding More Button Actions\n\n\nSee \nAdding More Button Actions\n for a quick tutorial on how to make more actions appear in the action selection.\n\n\nContributing\n\n\nContributions are welcome! Feel free to discuss your experience and request features at our \ncommunity\n. You may submit pull requests for the config at \nGitHub\n.", 
            "title": "Pisound Config"
        }, 
        {
            "location": "/pisound-config/#pisound-config", 
            "text": "pisound-config  allows reconfiguring the most important aspects of the system for use with Pisound, as well as setting up additional software and displaying some useful information. It is available since version 1.05 of  pisound-btn .  To get started, simply open a terminal and run:  sudo pisound-config  If you get a command not found error, see  Installing/Updating The Pisound Software  for instructions on how to get the latest version.", 
            "title": "Pisound Config"
        }, 
        {
            "location": "/pisound-config/#adding-more-button-actions", 
            "text": "See  Adding More Button Actions  for a quick tutorial on how to make more actions appear in the action selection.", 
            "title": "Adding More Button Actions"
        }, 
        {
            "location": "/pisound-config/#contributing", 
            "text": "Contributions are welcome! Feel free to discuss your experience and request features at our  community . You may submit pull requests for the config at  GitHub .", 
            "title": "Contributing"
        }, 
        {
            "location": "/pisound-&-Pure-Data/", 
            "text": "Pisound \n Pure Data\n\n\nUsing Pisound you can run your Pure Data patches straight from a USB thumb drive with a press of a button with no need to connect an external monitor, keyboard or mouse.\n\n\nPlug in a USB drive containing your Pure Data patch, main patch file called \nmain.pd\n, plug in any additional MIDI controller/keyboard, press The Button and Voil\u00e0!\n\n\nYou can read more about The Button functionality \nhere\n.\n\n\nAlso you may be interested in the \nPisound App\n.\n\n\nIf you haven't already, you can install Pure Data by running the following command in a Terminal window:\n\n\nsudo apt-get install puredata\n\n\n\nConfiguring Pure Data\n\n\nBy default, Pure Data is launched when \nsingle-clicking\n the button as so:\n\n\npuredata -stderr -alsa -audioadddev pisound -alsamidi -channels 2 -r 48000 -mididev 1 -send \n;pd dsp 1\n $@ \n\n\n\nYou may want to customize the command line arguments for Pure Data according to your own needs. To do that, check the \nPure Data's Command Line\n documentation and edit \n/usr/local/pisound/scripts/common/start_puredata.sh\n.", 
            "title": "Pisound & Pure Data"
        }, 
        {
            "location": "/pisound-&-Pure-Data/#pisound-pure-data", 
            "text": "Using Pisound you can run your Pure Data patches straight from a USB thumb drive with a press of a button with no need to connect an external monitor, keyboard or mouse.  Plug in a USB drive containing your Pure Data patch, main patch file called  main.pd , plug in any additional MIDI controller/keyboard, press The Button and Voil\u00e0!  You can read more about The Button functionality  here .  Also you may be interested in the  Pisound App .  If you haven't already, you can install Pure Data by running the following command in a Terminal window:  sudo apt-get install puredata", 
            "title": "Pisound &amp; Pure Data"
        }, 
        {
            "location": "/pisound-&-Pure-Data/#configuring-pure-data", 
            "text": "By default, Pure Data is launched when  single-clicking  the button as so:  puredata -stderr -alsa -audioadddev pisound -alsamidi -channels 2 -r 48000 -mididev 1 -send  ;pd dsp 1  $@   You may want to customize the command line arguments for Pure Data according to your own needs. To do that, check the  Pure Data's Command Line  documentation and edit  /usr/local/pisound/scripts/common/start_puredata.sh .", 
            "title": "Configuring Pure Data"
        }, 
        {
            "location": "/pisound-app/", 
            "text": "Pisound App\n\n\nThe mobile app communicates with a dedicated server running on Raspberry Pi \n Pisound via Bluetooth. It is called Pisound Control Server (\npisound-ctl\n) and it allows listing all supported patches in predefined locations (\n/usr/local/...-patches\n) and to selectively launch the patches in the appropriate software, making headless browsing and switching between patches easy.\n\n\nThe stdout and stderr outputs of the launched application are displayed in real time, informing the user on what is going on with the patch application.\n\n\nThe design is extensible - new scripts could be added to support launching patches on other audio applications, based on the file extension, see the \nCustomization\n section for more details.\n\n\nSoftware Setup\n\n\nRaspberry Pi\n\n\nFirst, make sure that Pisound is set up and that \npisound-btn --version\n says it\u2019s 1.04 or higher. If it is not, follow the install instructions on \nInstalling/Updating The Pisound Software\n. The \ninstall-pisound.sh\n will update \npisound-btn\n if it is already installed.\n\n\nIf using Raspberry Pi without built-in Bluetooth support, connect a USB Bluetooth dongle to it.\n\n\nThen, add Blokas\u2019 apt server:\n\n\ncurl https://blokas.io/apt-setup.sh | sh\n\n\n\nAnd install the Pisound Control Server:\n\n\nsudo apt-get install pisound-ctl\n\n\n\nAfter installing, \npisound-ctl\n will get launched automatically and will be added to system auto start.\n\n\nAndroid\n\n\nAccept beta testing invitation \nhere\n. (Make sure you\u2019re doing this logged in with the account you\u2019re using on Play Store)\n\n\nThe beta acceptance propagation in Google servers seems to take a while, the Play Store link below \nwill take up to 20 minutes\n before it starts working for you. Until then, it will show you \u201c\nWe\u2019re sorry, the requested URL was not found on this server.\n\u201d We know what you\u2019re thinking, but no - the link is fine, just be patient and hit F5. \ud83d\ude42 It may take even longer for the app to appear when searching for \u2018Pisound\u2019 on mobile version of the Play Store, however, you may request for the app to be installed remotely to your device using the link below.\n\n\nInstall the Pisound app on your device \nhere\n.\n\n\nWhy is the Location Permission Required?\n\n\nAs much as we hate excess permission requests ourselves, there\u2019s no way we can avoid requesting this one. We don\u2019t need or store your location information. It\u2019s required for an application to declare \nACCESS_COARSE_LOCATION\n permission in its Manifest for the application to be able to initiate discovery of nearby Bluetooth devices.\n\n\nThis is a new requirement since Android OS 6.0 - a nice summary of the issue is available \nhere\n.\n\n\nMore info\n on the new behavior.\n\n\nUsing the App\n\n\nConnecting to the Raspberry Pi\n\n\nHold The Button on Pisound for 3 LED blinks (but less than 5 or the shutdown will get triggered instead) to make it discoverable to other Bluetooth devices. After a while (180 seconds by default), it will automatically switch off the discoverability and the LED blinking should stop. This needs to be done only for initially pairing your device to Raspberry Pi. Afterwards, if using same devices and if they weren\u2019t unpaired, switching discoverability on is not needed, you may connect as usual. You may manually turn the discoverability off before it times out on Raspberry Pi by holding The Button for 3 LED blinks.\n\n\nThe initial screen of the Pisound app will list the paired Bluetooth devices immediately, and will automatically initiate discovery of other nearby devices. Once you see your Raspberry Pi in the list (usually \nraspberrypi\n unless you changed its hostname), tap it to connect to it. In case it didn\u2019t appear in the list, make sure that it is in discoverable mode and you may pull the list down in order to manually initiate a new scan of nearby devices.\n\n\nIf when starting the app it was already successfully connected to some device before, it would attempt to automatically connect to that device once.\n\n\nStarting a Patch\n\n\nClick \u2018Start a Patch\u2019 button - it will display a list of patches produced by \n/usr/local/pisound/scripts/pisound-ctl/patch_list.sh\n script on Raspberry Pi. You may modify it to fit your needs or add support for other software.\n\n\nAfter you click on one of the list items, \n/usr/local/pisound/scripts/pisound-ctl/patch_run.sh \npatch\n will get executed. This script is responsible for launching the software to handle the selected patch. First it extracts the extension, and dispatches handling to a script dedicated for the given extension. In Pure Data patch case, it detects \u2018.pd\u2019 extension, and executes \n/usr/local/pisound/scripts/pisound-ctl/run_pd.sh \npatch\n.\n\n\nFeel free to modify the scripts, add support for other software, etc\u2026 Contributions are welcome! \ud83d\ude42 See \nContribution Guide\n for details on how you can participate.\n\n\nAfter the patch is launched, the app immediately switches to the Output view page.\n\n\nYou may pull the list down to refresh it.\n\n\nPressing the \u2018back\u2019 button would go back to the main menu.\n\n\nPure Data\n\n\nThe Pure Data patches may consist of multiple .pd files. The convention is to have a subfolder for the entire patch, and the entry point to it should be called 'main.pd', and only files named like that are being searched for. An example location would be \n/usr/local/puredata-patches/testtone/main.pd\n\n\nLooking at Output\n\n\nThe \u2018Show Output\u2026\u2019 button initially is disabled, until there is some output to show. If it\u2019s enabled, pressing the button would navigate to the Output display page. If the bottom line is visible in the view, the view will auto-scroll to keep showing the very latest lines. In case you manually scroll up, it will remain in that position. If you manually scroll down to the bottom again, it would resume auto-scrolling.\n\n\nThe lines produced by stdout are colored black and the stderr lines are colored red.\n\n\nDisconnecting\n\n\nClicking the \u2018Disconnect' button in the main menu disconnects from the current device and goes back to the devices list / connect page.\n\n\nManaging the Server\n\n\nTo stop the server from automatically starting on boot:\n\n\nsudo systemctl disable pisound-ctl\n\n\n\nTo re-enable automatic start:\n\n\nsudo systemctl enable pisound-ctl\n\n\n\nCustomization\n\n\nThe main customizable parts are the scripts in \n/usr/local/pisound/scripts/pisound-ctl/\n.\n\n\npatch_list.sh\n\n\nThis script is responsible for producing the list of items to show in \u2018Start a Patch\u2019 menu. Every line produced to stdout will appear as an item in the patch list.\n\n\nYou may extend this file to support more kinds of files by getting their filenames to be echoed.\n\n\npatch_run.sh\n\n\nThis script receives the patch to launch in its arguments. It is responsible for checking the type of the provided patch and executing the appropriate launcher script. The last command of the script must launch the actual application which will handle the patch in blocking manner. Any post-setup which may be necessary (such as \naconnect\n for MIDI) must be scheduled in background with a delay so it happens after the main app gets started. It must done this way so that the \npisound-ctl\n is able to terminate the patch by killing the process id of the script.\n\n\nYou may extend this file for handling more kinds of patches by extending the case statement.\n\n\nrun_pd.sh\n\n\nA launcher script for executing Pure Data. It has a block for the delayed post-setup of the software MIDI connections to the Pure Data. You may tweak the command line arguments which are used to launch Pure Data if necessary.\n\n\nYou should create a dedicated script for launching a new file extension in its host software and get it called from \npatch_run.sh\n.\n\n\nContribution Guide\n\n\nThe scripts used by \npisound-ctl\n are hosted on GitHub here: \nhttps://github.com/BlokasLabs/pisound/blob/master/scripts/pisound-ctl\n.\n\n\nYou may submit pull requests with your modifications and additions.", 
            "title": "Pisound App"
        }, 
        {
            "location": "/pisound-app/#pisound-app", 
            "text": "The mobile app communicates with a dedicated server running on Raspberry Pi   Pisound via Bluetooth. It is called Pisound Control Server ( pisound-ctl ) and it allows listing all supported patches in predefined locations ( /usr/local/...-patches ) and to selectively launch the patches in the appropriate software, making headless browsing and switching between patches easy.  The stdout and stderr outputs of the launched application are displayed in real time, informing the user on what is going on with the patch application.  The design is extensible - new scripts could be added to support launching patches on other audio applications, based on the file extension, see the  Customization  section for more details.", 
            "title": "Pisound App"
        }, 
        {
            "location": "/pisound-app/#software-setup", 
            "text": "", 
            "title": "Software Setup"
        }, 
        {
            "location": "/pisound-app/#raspberry-pi", 
            "text": "First, make sure that Pisound is set up and that  pisound-btn --version  says it\u2019s 1.04 or higher. If it is not, follow the install instructions on  Installing/Updating The Pisound Software . The  install-pisound.sh  will update  pisound-btn  if it is already installed.  If using Raspberry Pi without built-in Bluetooth support, connect a USB Bluetooth dongle to it.  Then, add Blokas\u2019 apt server:  curl https://blokas.io/apt-setup.sh | sh  And install the Pisound Control Server:  sudo apt-get install pisound-ctl  After installing,  pisound-ctl  will get launched automatically and will be added to system auto start.", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/pisound-app/#android", 
            "text": "Accept beta testing invitation  here . (Make sure you\u2019re doing this logged in with the account you\u2019re using on Play Store)  The beta acceptance propagation in Google servers seems to take a while, the Play Store link below  will take up to 20 minutes  before it starts working for you. Until then, it will show you \u201c We\u2019re sorry, the requested URL was not found on this server. \u201d We know what you\u2019re thinking, but no - the link is fine, just be patient and hit F5. \ud83d\ude42 It may take even longer for the app to appear when searching for \u2018Pisound\u2019 on mobile version of the Play Store, however, you may request for the app to be installed remotely to your device using the link below.  Install the Pisound app on your device  here .", 
            "title": "Android"
        }, 
        {
            "location": "/pisound-app/#why-is-the-location-permission-required", 
            "text": "As much as we hate excess permission requests ourselves, there\u2019s no way we can avoid requesting this one. We don\u2019t need or store your location information. It\u2019s required for an application to declare  ACCESS_COARSE_LOCATION  permission in its Manifest for the application to be able to initiate discovery of nearby Bluetooth devices.  This is a new requirement since Android OS 6.0 - a nice summary of the issue is available  here .  More info  on the new behavior.", 
            "title": "Why is the Location Permission Required?"
        }, 
        {
            "location": "/pisound-app/#using-the-app", 
            "text": "", 
            "title": "Using the App"
        }, 
        {
            "location": "/pisound-app/#connecting-to-the-raspberry-pi", 
            "text": "Hold The Button on Pisound for 3 LED blinks (but less than 5 or the shutdown will get triggered instead) to make it discoverable to other Bluetooth devices. After a while (180 seconds by default), it will automatically switch off the discoverability and the LED blinking should stop. This needs to be done only for initially pairing your device to Raspberry Pi. Afterwards, if using same devices and if they weren\u2019t unpaired, switching discoverability on is not needed, you may connect as usual. You may manually turn the discoverability off before it times out on Raspberry Pi by holding The Button for 3 LED blinks.  The initial screen of the Pisound app will list the paired Bluetooth devices immediately, and will automatically initiate discovery of other nearby devices. Once you see your Raspberry Pi in the list (usually  raspberrypi  unless you changed its hostname), tap it to connect to it. In case it didn\u2019t appear in the list, make sure that it is in discoverable mode and you may pull the list down in order to manually initiate a new scan of nearby devices.  If when starting the app it was already successfully connected to some device before, it would attempt to automatically connect to that device once.", 
            "title": "Connecting to the Raspberry Pi"
        }, 
        {
            "location": "/pisound-app/#starting-a-patch", 
            "text": "Click \u2018Start a Patch\u2019 button - it will display a list of patches produced by  /usr/local/pisound/scripts/pisound-ctl/patch_list.sh  script on Raspberry Pi. You may modify it to fit your needs or add support for other software.  After you click on one of the list items,  /usr/local/pisound/scripts/pisound-ctl/patch_run.sh  patch  will get executed. This script is responsible for launching the software to handle the selected patch. First it extracts the extension, and dispatches handling to a script dedicated for the given extension. In Pure Data patch case, it detects \u2018.pd\u2019 extension, and executes  /usr/local/pisound/scripts/pisound-ctl/run_pd.sh  patch .  Feel free to modify the scripts, add support for other software, etc\u2026 Contributions are welcome! \ud83d\ude42 See  Contribution Guide  for details on how you can participate.  After the patch is launched, the app immediately switches to the Output view page.  You may pull the list down to refresh it.  Pressing the \u2018back\u2019 button would go back to the main menu.", 
            "title": "Starting a Patch"
        }, 
        {
            "location": "/pisound-app/#pure-data", 
            "text": "The Pure Data patches may consist of multiple .pd files. The convention is to have a subfolder for the entire patch, and the entry point to it should be called 'main.pd', and only files named like that are being searched for. An example location would be  /usr/local/puredata-patches/testtone/main.pd", 
            "title": "Pure Data"
        }, 
        {
            "location": "/pisound-app/#looking-at-output", 
            "text": "The \u2018Show Output\u2026\u2019 button initially is disabled, until there is some output to show. If it\u2019s enabled, pressing the button would navigate to the Output display page. If the bottom line is visible in the view, the view will auto-scroll to keep showing the very latest lines. In case you manually scroll up, it will remain in that position. If you manually scroll down to the bottom again, it would resume auto-scrolling.  The lines produced by stdout are colored black and the stderr lines are colored red.", 
            "title": "Looking at Output"
        }, 
        {
            "location": "/pisound-app/#disconnecting", 
            "text": "Clicking the \u2018Disconnect' button in the main menu disconnects from the current device and goes back to the devices list / connect page.", 
            "title": "Disconnecting"
        }, 
        {
            "location": "/pisound-app/#managing-the-server", 
            "text": "To stop the server from automatically starting on boot:  sudo systemctl disable pisound-ctl  To re-enable automatic start:  sudo systemctl enable pisound-ctl", 
            "title": "Managing the Server"
        }, 
        {
            "location": "/pisound-app/#customization", 
            "text": "The main customizable parts are the scripts in  /usr/local/pisound/scripts/pisound-ctl/ .", 
            "title": "Customization"
        }, 
        {
            "location": "/pisound-app/#patch_listsh", 
            "text": "This script is responsible for producing the list of items to show in \u2018Start a Patch\u2019 menu. Every line produced to stdout will appear as an item in the patch list.  You may extend this file to support more kinds of files by getting their filenames to be echoed.", 
            "title": "patch_list.sh"
        }, 
        {
            "location": "/pisound-app/#patch_runsh", 
            "text": "This script receives the patch to launch in its arguments. It is responsible for checking the type of the provided patch and executing the appropriate launcher script. The last command of the script must launch the actual application which will handle the patch in blocking manner. Any post-setup which may be necessary (such as  aconnect  for MIDI) must be scheduled in background with a delay so it happens after the main app gets started. It must done this way so that the  pisound-ctl  is able to terminate the patch by killing the process id of the script.  You may extend this file for handling more kinds of patches by extending the case statement.", 
            "title": "patch_run.sh"
        }, 
        {
            "location": "/pisound-app/#run_pdsh", 
            "text": "A launcher script for executing Pure Data. It has a block for the delayed post-setup of the software MIDI connections to the Pure Data. You may tweak the command line arguments which are used to launch Pure Data if necessary.  You should create a dedicated script for launching a new file extension in its host software and get it called from  patch_run.sh .", 
            "title": "run_pd.sh"
        }, 
        {
            "location": "/pisound-app/#contribution-guide", 
            "text": "The scripts used by  pisound-ctl  are hosted on GitHub here:  https://github.com/BlokasLabs/pisound/blob/master/scripts/pisound-ctl .  You may submit pull requests with your modifications and additions.", 
            "title": "Contribution Guide"
        }, 
        {
            "location": "/MODEP/", 
            "text": "MODEP - MOD Emulator for Pisound\n\n\n\n\nIntroduction\n\n\nMOD or Musician Operated Device is \u201ca multi-effects pedal that pushes the limit of your guitar, bass, keyboard or any other instrument to craft the sounds you want and reproduce them instantly at home, studio or on stage.\u201d\n\n\nMOD is based on Linux SBC and LV2 plugins ecosystem. It has an intuitive drag-and-drop web-based interface so you can assemble your pedalboards as you do in real life. You can find more information about MOD workflow \nhere\n.\n\n\nAs it should be clear for you by now, MODEP is an emulator that will allow you to play around with MOD system using your Raspberry Pi and Pisound board.\n\n\nBy the way, MOD is not only software, it\u2019s also a nice piece of hardware and the MOD team has done a remarkable job for the whole Linux audio open-source community, so if you like this emulator you should get the real thing @ \nhttps://moddevices.com\n.\n\n\nSetup Instructions\n\n\n\n\nThe fastest way to start messing around with MOD system is to download already prepared MODEP image file based on Rasbian Lite OS \nhere\n (follow \nthese instructions\n to install the image on your SD card).\n\n\nFor manual setup visit \nthis page\n. \n\n\nRunning MODEP\n\n\n\n\nMount your freshly baked SD card to your Pi\n\n\nPower up your Raspberry Pi\n\n\nConnect to it via \u2018Pisound' Wi-Fi hotspot using your computer or tablet (psw:blokaslabs)\n\n\nOpen your browser and go to this address \n172.24.1.1\n (you should see something like in the image below)\n\n\nThat\u2019s it. Now you can start building your pedalboards\n\n\n\n\n\n\nConfiguration\n\n\n\n\nssh pi@RASPBERRY_IP (psw:blokaslabs)\n\n\nrun \nmodep\n\n\n\n\nThe Button\n\n\nHere is the list of functions you can achieve using Pisound\u2019s button.\n\n\n\n\n\n\n\n\nInteraction\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nClick 1 to 8 times\n\n\nto load the pedalboard from the first bank on your list at index corresponding to the number of clicks (see the image below).\n\n\n\n\n\n\nHold for 1 second\n\n\nto turn Wi-Fi hotspot mode on/off.\n\n\n\n\n\n\nHold for 5 seconds\n\n\nto turn your Raspberry Pi off.\n\n\n\n\n\n\n\n\n\n\nPlugins\n\n\nAt the moment MODEP image comes with 144 LV2 plugins ranging from synths to heavy guitar distortion plugins.", 
            "title": "MOD Emulator for Pisound"
        }, 
        {
            "location": "/MODEP/#modep-mod-emulator-for-pisound", 
            "text": "", 
            "title": "MODEP - MOD Emulator for Pisound"
        }, 
        {
            "location": "/MODEP/#introduction", 
            "text": "MOD or Musician Operated Device is \u201ca multi-effects pedal that pushes the limit of your guitar, bass, keyboard or any other instrument to craft the sounds you want and reproduce them instantly at home, studio or on stage.\u201d  MOD is based on Linux SBC and LV2 plugins ecosystem. It has an intuitive drag-and-drop web-based interface so you can assemble your pedalboards as you do in real life. You can find more information about MOD workflow  here .  As it should be clear for you by now, MODEP is an emulator that will allow you to play around with MOD system using your Raspberry Pi and Pisound board.  By the way, MOD is not only software, it\u2019s also a nice piece of hardware and the MOD team has done a remarkable job for the whole Linux audio open-source community, so if you like this emulator you should get the real thing @  https://moddevices.com .", 
            "title": "Introduction"
        }, 
        {
            "location": "/MODEP/#setup-instructions", 
            "text": "The fastest way to start messing around with MOD system is to download already prepared MODEP image file based on Rasbian Lite OS  here  (follow  these instructions  to install the image on your SD card).  For manual setup visit  this page .", 
            "title": "Setup Instructions"
        }, 
        {
            "location": "/MODEP/#running-modep", 
            "text": "Mount your freshly baked SD card to your Pi  Power up your Raspberry Pi  Connect to it via \u2018Pisound' Wi-Fi hotspot using your computer or tablet (psw:blokaslabs)  Open your browser and go to this address  172.24.1.1  (you should see something like in the image below)  That\u2019s it. Now you can start building your pedalboards", 
            "title": "Running MODEP"
        }, 
        {
            "location": "/MODEP/#configuration", 
            "text": "ssh pi@RASPBERRY_IP (psw:blokaslabs)  run  modep", 
            "title": "Configuration"
        }, 
        {
            "location": "/MODEP/#the-button", 
            "text": "Here is the list of functions you can achieve using Pisound\u2019s button.     Interaction  Action      Click 1 to 8 times  to load the pedalboard from the first bank on your list at index corresponding to the number of clicks (see the image below).    Hold for 1 second  to turn Wi-Fi hotspot mode on/off.    Hold for 5 seconds  to turn your Raspberry Pi off.", 
            "title": "The Button"
        }, 
        {
            "location": "/MODEP/#plugins", 
            "text": "At the moment MODEP image comes with 144 LV2 plugins ranging from synths to heavy guitar distortion plugins.", 
            "title": "Plugins"
        }, 
        {
            "location": "/specs/", 
            "text": "Specifications\n\n\nThe shield itself conforms to Raspberry Pi\u2019s Hardware Attached on Top (HAT) specifications and connects to Pi via the 40-pin header. The shield is slightly bigger in length (56x100 mm) than RPi itself. It has two female DIN-5 connectors for MIDI in/out and two \n\" (6.35mm) stereo jack connectors for stereo audio in/out. There are two pots for gain and volume control, a programmable button and MIDI activity and input clip LEDs.\n\n\nAudio\n\n\n\n\n\n\n\n\nParameter\n\n\nConditions\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nInput/Output Coupling\n\n\n-\n\n\nAC and DC respectively\n\n\n\n\n\n\nInput/Output Channels\n\n\n-\n\n\n2 / 2 (Left and Right)\n\n\n\n\n\n\nInput/Output Type\n\n\n-\n\n\n\u00bc\" (6.35mm) Stereo\n\n\n\n\n\n\nInput/Output Resolution\n\n\n-\n\n\n24bit\n\n\n\n\n\n\nSampling Frequency (Fs)\n\n\n-\n\n\n48kHz, 96kHz, 192kHz\n\n\n\n\n\n\nInput/Output SNR@1kHz\n\n\nG = 0 dB\n\n\n110dB\n\n\n\n\n\n\nInput Impedance\n\n\n-\n\n\n100kOhm \n 2pF\n\n\n\n\n\n\nInput Gain (G)\n\n\n-\n\n\n0dB to +40dB\n\n\n\n\n\n\nInput Clip LED\n\n\n-\n\n\nYes\n\n\n\n\n\n\nInput Clip Voltage\n\n\nG = 0 dB\n\n\n5V (peak to peak)\n\n\n\n\n\n\nFull Scale Output\n\n\nLoad impedance \n 1 kOhm\n\n\n0V to 2.1V (RMS)\n\n\n\n\n\n\nLoopback Bandwidth (-3 dB)\n\n\nG = 0 dB, Fs = 48 kHz\n\n\n7.5Hz - 23kHz\n\n\n\n\n\n\nLoopback THD@1kHz\n\n\nG = 0 dB, Fs = 48 kHz\n\n\n 0.045%\n\n\n\n\n\n\nLoopback Latency\n\n\nFs = 192 kHz, RPi2, buffer size = 128 frames\n\n\n2.092ms\n\n\n\n\n\n\nPhantom Power\n\n\n-\n\n\nNone\n\n\n\n\n\n\n\n\nMIDI\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nInput/Output connectors\n\n\nDIN-5 female sockets\n\n\n\n\n\n\nMIDI loopback latency\n\n\n2.105ms\n\n\n\n\n\n\nActivity LEDs\n\n\nInput \n Output\n\n\n\n\n\n\n\n\nOther\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nCurrent Draw\n\n\n 300mA @ 5.1VDC\n\n\n\n\n\n\nDimensions\n\n\n56mm x 100mm\n\n\n\n\n\n\nWeight\n\n\n67g\n\n\n\n\n\n\n\n\nPower Supply\n\n\nThere are two versions of Pisound regarding power supply:\n\n\n\n\n\n\n9V version (beta):\n 7.2V - 12.6V, 18W minimum. 5.5x2.1 mm coaxial power jack connector. The inner connector is connected to the positive terminal, and the sleeve is connected to the ground. The power adapter connected to Pisound supplies the RPi board too, so RPi does not need to have its USB supply port connected. The Pisound itself has a power consumption of about 1.8W. A 9VDC power supply capable of delivering at least 2 Amps of current is recommended for this version.\n\n\n\n\n\n\n5.1V version (latest):\n Pisound has no power connection and requires no additional power supply. It powers up from RPi power supply via pins on RPi header. Pisound consumes no more than 300mA at 5.1VDC. When using this version of Pisound, we recommend to use the official \n5.1VDC RPi power supply\n.\n\n\n\n\n\n\nSupported Raspberry Pi Models\n\n\n\n\n\n\n\n\nCompatible models\n\n\n\n\n\n\n\n\n\n\nRaspberry Pi 1 Model A+\n\n\n\n\n\n\nRaspberry Pi 1 Model B+\n\n\n\n\n\n\nRaspberry Pi 2\n\n\n\n\n\n\nRaspberry Pi 2 version 1.2\n\n\n\n\n\n\nRaspberry Pi 3\n\n\n\n\n\n\nRaspberry Pi Zero version 1.2\n\n\n\n\n\n\nRaspberry Pi Zero version 1.3\n\n\n\n\n\n\n\n\nRaspberry Pi Pins Used by Pisound\n\n\n\n\n\n\nBlack - Power supply pins.\n\n\nRed - Pins used by Pisound.\n\n\nGreen - Pins available for your use.\n\n\nBlue - Pins reserved for Raspberry Pi hats use.\n\n\n\n\nPinout of Pisound Header\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nCorresponding Raspberry Pi Pin\n\n\n\n\n\n\n\n\n\n\n1\n\n\nGround\n\n\n\n\n\n\n2\n\n\n5v Power\n\n\n\n\n\n\n3\n\n\nBCM 7 (CE1)\n\n\n\n\n\n\n4\n\n\n3v3 Power\n\n\n\n\n\n\n5\n\n\nBCM 5\n\n\n\n\n\n\n6\n\n\nBCM 6\n\n\n\n\n\n\n7\n\n\nBCM 22\n\n\n\n\n\n\n8\n\n\nBCM 23\n\n\n\n\n\n\n9\n\n\nBCM 27\n\n\n\n\n\n\n10\n\n\nBCM 4 (GPCLK0)\n\n\n\n\n\n\n11\n\n\nBCM 15 (RXD)\n\n\n\n\n\n\n12\n\n\nBCM 14 (TXD)\n\n\n\n\n\n\n13\n\n\nBCM 2 (SDA)\n\n\n\n\n\n\n14\n\n\nBCM 3 (SLC)", 
            "title": "Detailed Specs"
        }, 
        {
            "location": "/specs/#specifications", 
            "text": "The shield itself conforms to Raspberry Pi\u2019s Hardware Attached on Top (HAT) specifications and connects to Pi via the 40-pin header. The shield is slightly bigger in length (56x100 mm) than RPi itself. It has two female DIN-5 connectors for MIDI in/out and two  \" (6.35mm) stereo jack connectors for stereo audio in/out. There are two pots for gain and volume control, a programmable button and MIDI activity and input clip LEDs.", 
            "title": "Specifications"
        }, 
        {
            "location": "/specs/#audio", 
            "text": "Parameter  Conditions  Value      Input/Output Coupling  -  AC and DC respectively    Input/Output Channels  -  2 / 2 (Left and Right)    Input/Output Type  -  \u00bc\" (6.35mm) Stereo    Input/Output Resolution  -  24bit    Sampling Frequency (Fs)  -  48kHz, 96kHz, 192kHz    Input/Output SNR@1kHz  G = 0 dB  110dB    Input Impedance  -  100kOhm   2pF    Input Gain (G)  -  0dB to +40dB    Input Clip LED  -  Yes    Input Clip Voltage  G = 0 dB  5V (peak to peak)    Full Scale Output  Load impedance   1 kOhm  0V to 2.1V (RMS)    Loopback Bandwidth (-3 dB)  G = 0 dB, Fs = 48 kHz  7.5Hz - 23kHz    Loopback THD@1kHz  G = 0 dB, Fs = 48 kHz   0.045%    Loopback Latency  Fs = 192 kHz, RPi2, buffer size = 128 frames  2.092ms    Phantom Power  -  None", 
            "title": "Audio"
        }, 
        {
            "location": "/specs/#midi", 
            "text": "Parameter  Value      Input/Output connectors  DIN-5 female sockets    MIDI loopback latency  2.105ms    Activity LEDs  Input   Output", 
            "title": "MIDI"
        }, 
        {
            "location": "/specs/#other", 
            "text": "Parameter  Value      Current Draw   300mA @ 5.1VDC    Dimensions  56mm x 100mm    Weight  67g", 
            "title": "Other"
        }, 
        {
            "location": "/specs/#power-supply", 
            "text": "There are two versions of Pisound regarding power supply:    9V version (beta):  7.2V - 12.6V, 18W minimum. 5.5x2.1 mm coaxial power jack connector. The inner connector is connected to the positive terminal, and the sleeve is connected to the ground. The power adapter connected to Pisound supplies the RPi board too, so RPi does not need to have its USB supply port connected. The Pisound itself has a power consumption of about 1.8W. A 9VDC power supply capable of delivering at least 2 Amps of current is recommended for this version.    5.1V version (latest):  Pisound has no power connection and requires no additional power supply. It powers up from RPi power supply via pins on RPi header. Pisound consumes no more than 300mA at 5.1VDC. When using this version of Pisound, we recommend to use the official  5.1VDC RPi power supply .", 
            "title": "Power Supply"
        }, 
        {
            "location": "/specs/#supported-raspberry-pi-models", 
            "text": "Compatible models      Raspberry Pi 1 Model A+    Raspberry Pi 1 Model B+    Raspberry Pi 2    Raspberry Pi 2 version 1.2    Raspberry Pi 3    Raspberry Pi Zero version 1.2    Raspberry Pi Zero version 1.3", 
            "title": "Supported Raspberry Pi Models"
        }, 
        {
            "location": "/specs/#raspberry-pi-pins-used-by-pisound", 
            "text": "Black - Power supply pins.  Red - Pins used by Pisound.  Green - Pins available for your use.  Blue - Pins reserved for Raspberry Pi hats use.", 
            "title": "Raspberry Pi Pins Used by Pisound"
        }, 
        {
            "location": "/specs/#pinout-of-pisound-header", 
            "text": "Number  Corresponding Raspberry Pi Pin      1  Ground    2  5v Power    3  BCM 7 (CE1)    4  3v3 Power    5  BCM 5    6  BCM 6    7  BCM 22    8  BCM 23    9  BCM 27    10  BCM 4 (GPCLK0)    11  BCM 15 (RXD)    12  BCM 14 (TXD)    13  BCM 2 (SDA)    14  BCM 3 (SLC)", 
            "title": "Pinout of Pisound Header"
        }, 
        {
            "location": "/Example-projects/", 
            "text": "Projects Using Pisound\n\n\nPisound and LV2 Plugins\n\n\nOn \nhttp://rpi.autostatic.com/\n repository you can find some cool software packages for audio. One of those is \nCarla\n - a host for LV2 plugins.\n\n\n\n\nSo let's give it a go.\n\n\nFirst we have to add the repository to apt-get:\n\nwget -q -O - http://rpi.autostatic.com/autostatic.gpg.key | sudo apt-key add -\nsudo wget -q -O /etc/apt/sources.list.d/autostatic-audio-raspbian.list http://rpi.autostatic.com/autostatic-audio-raspbian.list\nsudo apt-get update\n\nAfter that's done, let's install \nCarla\n as well as \njackd\n server and \nqjackctl\n for configuring it:\n\nsudo apt-get install carla jackd qjackctl\n\nThen start \nqjackctl\n, you can do that by hitting Alt+F2 and typing in \nqjackctl\n and pressing enter.\n\n\nConfigure it in Setup... like so:\n\n\n\n\nAnd start the jack server by pressing Start:\n\n\n\n\nNow run Carla (Alt+F2, carla, enter)\n\n\nClick Configure Carla and make sure that Audio Driver is set to JACK. It will connect to the already started Jack server. For process mode I've used Single Client, but you can use any option you like.\n\n\nThen you can add plugins in Plugins section, and patch them up in Patch Bay section.\n\n\nThe top screenshot shows \nZSynAddSubFX\n connected to Pisound's Input and Output, as well as MIDI data routed to the synth plugin.\n\n\nThere's a couple of plugins readily available to play around within Carla, and you should be able to find more LV2 plugins built for Raspberry Pi to experiment with on the Internet.\n\n\nInternet Radio Station\n\n\nUsing \nicecast\n and \ndarkice\n you can easily setup your own radio station and broadcast whatever is connected to the Pisound input!\n\n\nFirst let's get the required software installed:\n\nsudo apt-get install icecast2 darkice\n\nThen we have to configure the darkice, feel free to customize to your liking.\n\n\nSave the below contents to \n/etc/darkice.cfg\n\n\n# this section describes general aspects of the live streaming session\n[general]\nduration      = 0                # duration of encoding, in seconds. 0 means forever\nbufferSecs    = 2                # size of internal slip buffer, in seconds\nreconnect     = yes              # reconnect to the server(s) if disconnected\n\n# this section describes the audio input that will be streamed\n[input]\ndevice        = hw:1,0           # Alsa soundcard device for the audio input\nsampleRate    = 48000            # sample rate in Hz. try 48000, 96000 or 192000\nbitsPerSample = 16               # bits per sample. try 16\nchannel       = 2                # channels. 1 = mono, 2 = stereo.\n                                 # Only stereo mode is supported by Pisound.\n\n# this section describes a streaming connection to an IceCast2 server\n# there may be up to 8 of these sections, named [icecast2-0] ... [icecast2-7]\n# these can be mixed with [icecast-x] and [shoutcast-x] sections\n[icecast2-0]\nbitrateMode   = cbr              # variable bit rate\nbitrate       = 128\nformat        = mp3              # format of the stream: mp3\nquality       = 0.8              # quality of the stream sent to the server\nserver        = localhost        # host name of the server\nport          = 8000             # port of the IceCast2 server, usually 8000\npassword      = hackme           # source password to the IceCast2 server\nmountPoint    = pisound          # mount point of this stream on the IceCast2 server\nname          = pisound          # name of the stream\ndescription   = DarkIce on Pisound # description of the stream\nurl           = http://localhost # URL related to the stream\ngenre         = my genre         # genre of the stream\npublic        = no               # advertise this stream?\n#localDumpFile = recording.mp3   # Record also to a file\n\n\nAnd finally, execute 'darkice' in a terminal or using Alt+F2:\n\n\ndarkice\n\n\nThen from other devices you can connect to \nhttp://raspberrypi_ip:8000/\n to see generic information about the station and \nhttp://raspberry_ip:8000/pisound\n to listen. (Replace raspberrypi_ip in the URLs using the IP of the Raspberry Pi)\n\n\nFor your station to be reachable outside of your local network, you need to have an externally accessible IP address provided by your ISP and you need to configure port forwarding on your router to forward requests on some port to port 8000 on Raspberry Pi. However, this is out of scope for this guide, there should be plenty of info around on how to set that up.\n\n\nNetwork Enabled Hi-Fi Player\n\n\nYou can use Pisound with Volumio! Since version 2.129 (25-03-2017), Pisound's module is integrated into Volumio, so installing the latest version or updating should be enough to get 'Pisound' listed in Playback Options. Just enable I2S DACs, pick Pisound and save the configuration! We recommend switching the mixer to 'Software', if you want to control the volume within Volumio. You can use 'Hardware' mixer if using the physical volume control on Pisound.\n\n\nNow you can enjoy using Pisound as a network media player!\n\n\n\n\nPisound with DIY MIDI Controller\n\n\nIf you want to add more controls to your Pisound audio projects, you can make your own MIDI controller using a couple of potentiometers, push buttons and any Arduino compatible board that uses ATmega32U4 microcontroller. Alternatively, it should be straightforward to adapt the example code to use DIN-5 MIDI ports, as the usbmidi API interface is compatible with Serial API.\n\n\n\n\nGo \nhere\n for full instructions.", 
            "title": "Example Projects"
        }, 
        {
            "location": "/Example-projects/#projects-using-pisound", 
            "text": "", 
            "title": "Projects Using Pisound"
        }, 
        {
            "location": "/Example-projects/#pisound-and-lv2-plugins", 
            "text": "On  http://rpi.autostatic.com/  repository you can find some cool software packages for audio. One of those is  Carla  - a host for LV2 plugins.   So let's give it a go.  First we have to add the repository to apt-get: wget -q -O - http://rpi.autostatic.com/autostatic.gpg.key | sudo apt-key add -\nsudo wget -q -O /etc/apt/sources.list.d/autostatic-audio-raspbian.list http://rpi.autostatic.com/autostatic-audio-raspbian.list\nsudo apt-get update \nAfter that's done, let's install  Carla  as well as  jackd  server and  qjackctl  for configuring it: sudo apt-get install carla jackd qjackctl \nThen start  qjackctl , you can do that by hitting Alt+F2 and typing in  qjackctl  and pressing enter.  Configure it in Setup... like so:   And start the jack server by pressing Start:   Now run Carla (Alt+F2, carla, enter)  Click Configure Carla and make sure that Audio Driver is set to JACK. It will connect to the already started Jack server. For process mode I've used Single Client, but you can use any option you like.  Then you can add plugins in Plugins section, and patch them up in Patch Bay section.  The top screenshot shows  ZSynAddSubFX  connected to Pisound's Input and Output, as well as MIDI data routed to the synth plugin.  There's a couple of plugins readily available to play around within Carla, and you should be able to find more LV2 plugins built for Raspberry Pi to experiment with on the Internet.", 
            "title": "Pisound and LV2 Plugins"
        }, 
        {
            "location": "/Example-projects/#internet-radio-station", 
            "text": "Using  icecast  and  darkice  you can easily setup your own radio station and broadcast whatever is connected to the Pisound input!  First let's get the required software installed: sudo apt-get install icecast2 darkice \nThen we have to configure the darkice, feel free to customize to your liking.  Save the below contents to  /etc/darkice.cfg  # this section describes general aspects of the live streaming session\n[general]\nduration      = 0                # duration of encoding, in seconds. 0 means forever\nbufferSecs    = 2                # size of internal slip buffer, in seconds\nreconnect     = yes              # reconnect to the server(s) if disconnected\n\n# this section describes the audio input that will be streamed\n[input]\ndevice        = hw:1,0           # Alsa soundcard device for the audio input\nsampleRate    = 48000            # sample rate in Hz. try 48000, 96000 or 192000\nbitsPerSample = 16               # bits per sample. try 16\nchannel       = 2                # channels. 1 = mono, 2 = stereo.\n                                 # Only stereo mode is supported by Pisound.\n\n# this section describes a streaming connection to an IceCast2 server\n# there may be up to 8 of these sections, named [icecast2-0] ... [icecast2-7]\n# these can be mixed with [icecast-x] and [shoutcast-x] sections\n[icecast2-0]\nbitrateMode   = cbr              # variable bit rate\nbitrate       = 128\nformat        = mp3              # format of the stream: mp3\nquality       = 0.8              # quality of the stream sent to the server\nserver        = localhost        # host name of the server\nport          = 8000             # port of the IceCast2 server, usually 8000\npassword      = hackme           # source password to the IceCast2 server\nmountPoint    = pisound          # mount point of this stream on the IceCast2 server\nname          = pisound          # name of the stream\ndescription   = DarkIce on Pisound # description of the stream\nurl           = http://localhost # URL related to the stream\ngenre         = my genre         # genre of the stream\npublic        = no               # advertise this stream?\n#localDumpFile = recording.mp3   # Record also to a file  And finally, execute 'darkice' in a terminal or using Alt+F2:  darkice  Then from other devices you can connect to  http://raspberrypi_ip:8000/  to see generic information about the station and  http://raspberry_ip:8000/pisound  to listen. (Replace raspberrypi_ip in the URLs using the IP of the Raspberry Pi)  For your station to be reachable outside of your local network, you need to have an externally accessible IP address provided by your ISP and you need to configure port forwarding on your router to forward requests on some port to port 8000 on Raspberry Pi. However, this is out of scope for this guide, there should be plenty of info around on how to set that up.", 
            "title": "Internet Radio Station"
        }, 
        {
            "location": "/Example-projects/#network-enabled-hi-fi-player", 
            "text": "You can use Pisound with Volumio! Since version 2.129 (25-03-2017), Pisound's module is integrated into Volumio, so installing the latest version or updating should be enough to get 'Pisound' listed in Playback Options. Just enable I2S DACs, pick Pisound and save the configuration! We recommend switching the mixer to 'Software', if you want to control the volume within Volumio. You can use 'Hardware' mixer if using the physical volume control on Pisound.  Now you can enjoy using Pisound as a network media player!", 
            "title": "Network Enabled Hi-Fi Player"
        }, 
        {
            "location": "/Example-projects/#pisound-with-diy-midi-controller", 
            "text": "If you want to add more controls to your Pisound audio projects, you can make your own MIDI controller using a couple of potentiometers, push buttons and any Arduino compatible board that uses ATmega32U4 microcontroller. Alternatively, it should be straightforward to adapt the example code to use DIN-5 MIDI ports, as the usbmidi API interface is compatible with Serial API.   Go  here  for full instructions.", 
            "title": "Pisound with DIY MIDI Controller"
        }, 
        {
            "location": "/faqs/", 
            "text": "How to start Jack Server for Pisound?\n\n\nIn case you don't have qjackctl installed, run:\n\nsudo apt-get install qjackctl\n\nTo start the server, configured to use Pisound, follow these steps:\n\n\n\n\nRun QJackCtl (either from the Applications-\nSound \n Video menu or executing 'qjackctl' in a terminal.\n\n\nClick Setup...\n\n\nMake sure that the following settings are set correctly:\n\n\nSample Rate is one of '48000', '96000' or '192000'. (The higher the sample rate, the more there is data to process for software. However, higher sample rate has slightly less latency, if software is fast enough to keep up!)\n\n\nInput Device and Output Device both are set to 'hw:pisound'.\n\n\nMIDI Driver is set to 'seq'\n\n\nClose the Setup window.\n\n\nClick Start.\n\n\nIf everything is fine, you should see 'Started' text written at the top left corner of the status area.\n\n\n\n\nNote:\n If something goes wrong, try different settings in Setup, and make sure that the sound card is not being exclusively used by some other software.\n\n\n\n\nHow to use Sonic Pi with Pisound?\n\n\nThe latest version of Sonic Pi works out of the box without any manual changes! Just start it from the menu -\n Programming -\n Sonic Pi!\n\n\nHow to send WiFi-MIDI messages to your Raspberry Pi?\n\n\nMaking use of your phone or a tablet for controlling software on Raspberry Pi using Pisound is relatively easy, just follow these steps:\n\n\n\n\nTriple-click the button on Pisound to enable the WiFi hotspot mode, touchosc2midi starts also.\n\n\nConnect to \"Pisound\" WiFi access point using a phone or a tablet, using 'blokaslabs' as the password.\n\n\nOpen TouchOSC, MyOSC or similar app on your external device.\n\n\nHost IP address in the app's settings should be 172.24.1.1\n\n\nThat's it. From this point you can send messages from your phone/tablet to software running on your Raspberry Pi. The MIDI CC / Note number depends on the configuration of the app, for more information, see the TouchOSC documentation here: \nhttps://hexler.net/docs/touchosc-editor-controls-properties\n\n\n\n\nNote:\n If you want to to control Pd patch with Wifi-MIDI messages, after completing the steps above, insert a USB stick with your patch files into your Raspberry Pi and click the Pisound button once to launch the patch!", 
            "title": "FAQs"
        }, 
        {
            "location": "/faqs/#how-to-start-jack-server-for-pisound", 
            "text": "In case you don't have qjackctl installed, run: sudo apt-get install qjackctl \nTo start the server, configured to use Pisound, follow these steps:   Run QJackCtl (either from the Applications- Sound   Video menu or executing 'qjackctl' in a terminal.  Click Setup...  Make sure that the following settings are set correctly:  Sample Rate is one of '48000', '96000' or '192000'. (The higher the sample rate, the more there is data to process for software. However, higher sample rate has slightly less latency, if software is fast enough to keep up!)  Input Device and Output Device both are set to 'hw:pisound'.  MIDI Driver is set to 'seq'  Close the Setup window.  Click Start.  If everything is fine, you should see 'Started' text written at the top left corner of the status area.   Note:  If something goes wrong, try different settings in Setup, and make sure that the sound card is not being exclusively used by some other software.", 
            "title": "How to start Jack Server for Pisound?"
        }, 
        {
            "location": "/faqs/#how-to-use-sonic-pi-with-pisound", 
            "text": "The latest version of Sonic Pi works out of the box without any manual changes! Just start it from the menu -  Programming -  Sonic Pi!", 
            "title": "How to use Sonic Pi with Pisound?"
        }, 
        {
            "location": "/faqs/#how-to-send-wifi-midi-messages-to-your-raspberry-pi", 
            "text": "Making use of your phone or a tablet for controlling software on Raspberry Pi using Pisound is relatively easy, just follow these steps:   Triple-click the button on Pisound to enable the WiFi hotspot mode, touchosc2midi starts also.  Connect to \"Pisound\" WiFi access point using a phone or a tablet, using 'blokaslabs' as the password.  Open TouchOSC, MyOSC or similar app on your external device.  Host IP address in the app's settings should be 172.24.1.1  That's it. From this point you can send messages from your phone/tablet to software running on your Raspberry Pi. The MIDI CC / Note number depends on the configuration of the app, for more information, see the TouchOSC documentation here:  https://hexler.net/docs/touchosc-editor-controls-properties   Note:  If you want to to control Pd patch with Wifi-MIDI messages, after completing the steps above, insert a USB stick with your patch files into your Raspberry Pi and click the Pisound button once to launch the patch!", 
            "title": "How to send WiFi-MIDI messages to your Raspberry Pi?"
        }
    ]
}